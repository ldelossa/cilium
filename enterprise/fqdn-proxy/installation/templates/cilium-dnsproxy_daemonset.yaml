{{- /* Workaround so that we can set the minimal k8s version that we support */ -}}
{{- $k8sVersion := .Capabilities.KubeVersion.Version -}}
{{- $k8sMajor := .Capabilities.KubeVersion.Major -}}
{{- $k8sMinor := .Capabilities.KubeVersion.Minor -}}

{{- if .Values.Capabilities -}}
{{- if .Values.Capabilities.KubeVersion -}}
{{- if .Values.Capabilities.KubeVersion.Version -}}
{{- $k8sVersion = .Values.Capabilities.KubeVersion.Version -}}
{{- if .Values.Capabilities.KubeVersion.Major -}}
{{- $k8sMajor = toString (.Values.Capabilities.KubeVersion.Major) -}}
{{- if .Values.Capabilities.KubeVersion.Minor -}}
{{- $k8sMinor = toString (.Values.Capabilities.KubeVersion.Minor) -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: cilium-dnsproxy
{{- if .Values.keepDeprecatedLabels }}
    kubernetes.io/cluster-service: "true"
{{- if and (eq .Release.Namespace "kube-system" ) .Values.gke.enabled }}
{{- fail "Invalid configuration: Installing Cilium on GKE with 'kubernetes.io/cluster-service' labels on 'kube-system' namespace causes Cilium DaemonSet to be removed by GKE. Either install Cilium on a different Namespace or install with '--set keepDeprecatedLabels=false'"}}
{{- end }}
{{- end }}
  name: cilium-dnsproxy
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      k8s-app: cilium-dnsproxy
{{- if .Values.keepDeprecatedLabels }}
      kubernetes.io/cluster-service: "true"
{{- end }}
{{- with .Values.updateStrategy }}
  updateStrategy:
    {{- toYaml . | trim | nindent 4 }}
{{- end }}
  template:
    metadata:
      annotations:
{{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
{{- end }}
      labels:
        k8s-app: cilium-dnsproxy
{{- if .Values.keepDeprecatedLabels }}
        kubernetes.io/cluster-service: "true"
{{- end }}
{{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
{{- end }}
    spec:
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 6 }}
{{- end }}
{{- if eq .Values.upgradeCompatibility "1.13" }}
      initContainers:
      - name: upgrade-compatibility
        image: "{{ if .Values.iptables.image.override }}{{ .Values.iptables.image.override }}{{ else }}{{ .Values.iptables.image.repository }}:{{ .Values.iptables.image.tag }}{{ end }}"
        imagePullPolicy: {{ .Values.iptables.image.imagePullPolicy }}
        command:
          - sh
          - -c
          - |
            {{- .Files.Get "files/ensure-cilium-v114-rules.sh" | nindent 12 }}
        env:
          - name: CILIUM_ENABLE_IPV4
            valueFrom:
              configMapKeyRef:
                key: enable-ipv4
                name: cilium-config
                optional: true
          - name: CILIUM_ENABLE_IPV6
            valueFrom:
              configMapKeyRef:
                key: enable-ipv6
                name: cilium-config
                optional: true
        terminationMessagePolicy: FallbackToLogsOnError
{{- with .Values.iptables.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        volumeMounts:
          - name: lib-modules
            mountPath: /lib/modules
            readOnly: true
          - name: xtables-lock
            mountPath: /run/xtables.lock
{{- end }}
      containers:
      - command:
        - dnsproxy
        args:
        - --tofqdns-dns-reject-response-code={{ .Values.dnsProxy.dnsRejectResponseCode }}
{{- if .Values.debug }}
        - --debug
{{- end }}
{{- if .Values.metrics.enabled }}
        - --expose-metrics
{{- end }}
{{- if .Values.metrics.port }}
        - --prometheus-port={{ .Values.metrics.port }}
{{- end }}
{{- with .Values.extraArgs }}
{{- toYaml . | trim | nindent 8 }}
{{- end }}
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_ENABLE_IPV4
          valueFrom:
            configMapKeyRef:
              key: enable-ipv4
              name: cilium-config
              optional: true
        - name: CILIUM_ENABLE_IPV6
          valueFrom:
            configMapKeyRef:
              key: enable-ipv6
              name: cilium-config
              optional: true
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
        - name: CILIUM_DNSPROXY_ENABLE_TRANSPARENT_MODE
          valueFrom:
            configMapKeyRef:
              key: dnsproxy-enable-transparent-mode
              name: cilium-config
              optional: true
        - name: CILIUM_DNSPROXY_SOCKET_LINGER_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: dnsproxy-socket-linger-timeout
              name: cilium-config
              optional: true
{{- if .Values.k8sServiceHost }}
        - name: KUBERNETES_SERVICE_HOST
          value: {{ .Values.k8sServiceHost | quote }}
{{- end }}
{{- if .Values.k8sServicePort }}
        - name: KUBERNETES_SERVICE_PORT
          value: {{ .Values.k8sServicePort | quote }}
{{- end }}
{{- with .Values.extraEnv }}
{{ toYaml . | trim | indent 8 }}
{{- end }}
        image: "{{ if .Values.image.override }}{{ .Values.image.override }}{{ else }}{{ .Values.image.repository }}:{{ .Values.image.tag }}{{ end }}"
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
{{- if .Values.metrics.enabled }}
        ports:
        - containerPort: {{ .Values.metrics.port }}
          name: metrics
          protocol: TCP
{{- end }}
{{- if .Values.resources }}
        resources:
          {{- toYaml .Values.resources | trim | nindent 10 }}
{{- end }}
        name: cilium-dnsproxy
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
{{- with .Values.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
{{- end }}
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: {{ include "priorityClass" (list $ .Values.priorityClassName "system-node-critical") }} 
      serviceAccountName: {{ .Values.serviceAccount.name }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automount }}
      terminationGracePeriodSeconds: 1
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{ toYaml . | nindent 8 }}
      {{- end }}
{{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | trim | nindent 6 }}
{{- end }}
      volumes:
        # To keep state between restarts / upgrades
      - hostPath:
          path: {{ .Values.runPath }}
          type: DirectoryOrCreate
        name: cilium-run
        # To be able to load kernel modules
      - hostPath:
          path: /lib/modules
        name: lib-modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
{{- if .Values.kubeConfigPath }}
      - hostPath:
          path: {{ .Values.kubeConfigPath }}
          type: FileOrCreate
        name: kube-config
{{- end }}
      - configMap:
          name: cilium-config
        name: cilium-config-path
{{- with .Values.extraVolumes }}
      {{- toYaml . | nindent 6 }}
{{- end }}
