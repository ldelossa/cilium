//  Copyright (C) Isovalent, Inc. - All Rights Reserved.
//
//  NOTICE: All information contained herein is, and remains the property of
//  Isovalent Inc and its suppliers, if any. The intellectual and technical
//  concepts contained herein are proprietary to Isovalent Inc and its suppliers
//  and may be covered by U.S. and Foreign Patents, patents in process, and are
//  protected by trade secret or copyright law.  Dissemination of this information
//  or reproduction of this material is strictly forbidden unless prior written
//  permission is obtained from Isovalent Inc.
//

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package dnsproxy;

option go_package = "github.com/isovalent/fqdn-proxy/api/v1/dnsproxy";

service FQDNProxyAgent {

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of FQDNMapping
  rpc ProvideMappings(stream FQDNMapping) returns (Success){}

  // LookupEndpointByIP returns endpoint data based on IP
  rpc LookupEndpointByIP(FQDN_IP) returns (Endpoint){}

  // LookupEndpointByIP returns endpoint data based on IP
  rpc LookupSecurityIdentityByIP(FQDN_IP) returns (Identity){}

  // LookupIPsBySecurityIdentity retrieves ips for endpoints with given security identity
  rpc LookupIPsBySecurityIdentity(Identity) returns(IPs){}

  // NotifyOnDNSMessage notifies Agent of a DNS message
  rpc NotifyOnDNSMessage(DNSNotification) returns(Empty) {}

  // GetAllRules retrieves all FQDN rules from agent proxy
  rpc GetAllRules(Empty) returns(RestoredRulesMap){}
}

service FQDNProxy {
  rpc UpdateAllowed(FQDNRules) returns(Empty) {}

  rpc RemoveRestoredRules(EndpointID) returns(Empty) {}
  rpc GetRules(EndpointID) returns(RestoredRules) {}
}

message RestoredRulesMap {
  map<uint64, RestoredRules> rules = 1;
}
message RestoredRules {
  map<uint32, IPRules> rules = 1;
}

message IPRules {
  repeated IPRule list = 1;
}

message IPRule {
  string regex = 1;
  repeated string ips = 2;
}

message EndpointID {
  uint32 endpointID = 1;
}

message Empty {}

message FQDNRules{
  uint64 endpointID = 1;
  uint32 destPort = 2;
  L7Rules rules = 3;
  uint32 destProto = 4;
}

message L7Rules {
  map<string, string> SelectorRegexMapping = 1;
  map<string, IdentityList> SelectorIdentitiesMapping = 2;
}

message IdentityList {
  repeated uint32 list = 1;
}

message DNSNotification {
  google.protobuf.Timestamp time = 1;
  Endpoint endpoint = 2;
  string epIPPort = 3;
  string serverAddr = 4;
  bytes msg = 5;
  string protocol = 6;
  bool allowed = 7;
  uint32 serverID = 8;
}

message IPs {
  repeated bytes IPs = 1;
}

message FQDN_IP {
  bytes IP = 1;
}

message Identity{
  uint32 ID = 1;
  string Source = 2;
  bool Exists = 3;
}

message FQDNMapping {
    bytes IP = 1;
    string FQDN = 2;
}

message Success {
  bool result = 1;
}

message Endpoint {
    uint32 ID = 1;
    uint32 identity = 2;
    string namespace = 3;
    // labels in `foo=bar` format.
    repeated string labels = 4;
    string pod_name = 5;
    repeated Workload workloads = 6;
}

message Workload {
    string name = 1;
    string kind = 2;
}
