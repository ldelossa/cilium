// Code generated by go-swagger; DO NOT EDIT.

// Copyright (C) Isovalent, Inc. - All Rights Reserved.
//
// NOTICE: All information contained herein is, and remains the property of
// Isovalent Inc and its suppliers, if any. The intellectual and technical
// concepts contained herein are proprietary to Isovalent Inc and its suppliers
// and may be covered by U.S. and Foreign Patents, patents in process, and are
// protected by trade secret or copyright law.  Dissemination of this information
// or reproduction of this material is strictly forbidden unless prior written
// permission is obtained from Isovalent Inc.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cilium/cilium/enterprise/api/v1/models"
)

// GetHealthzReader is a Reader for the GetHealthz structure.
type GetHealthzReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHealthzReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHealthzOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetHealthzDisabled()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetHealthzFailure()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetHealthzOK creates a GetHealthzOK with default headers values
func NewGetHealthzOK() *GetHealthzOK {
	return &GetHealthzOK{}
}

/*
GetHealthzOK describes a response with status code 200, with default header values.

Success
*/
type GetHealthzOK struct {
}

// IsSuccess returns true when this get healthz o k response has a 2xx status code
func (o *GetHealthzOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get healthz o k response has a 3xx status code
func (o *GetHealthzOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get healthz o k response has a 4xx status code
func (o *GetHealthzOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get healthz o k response has a 5xx status code
func (o *GetHealthzOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get healthz o k response a status code equal to that given
func (o *GetHealthzOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetHealthzOK) Error() string {
	return fmt.Sprintf("[GET /healthz][%d] getHealthzOK ", 200)
}

func (o *GetHealthzOK) String() string {
	return fmt.Sprintf("[GET /healthz][%d] getHealthzOK ", 200)
}

func (o *GetHealthzOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHealthzDisabled creates a GetHealthzDisabled with default headers values
func NewGetHealthzDisabled() *GetHealthzDisabled {
	return &GetHealthzDisabled{}
}

/*
GetHealthzDisabled describes a response with status code 404, with default header values.

Cilium Enterprise API is not available
*/
type GetHealthzDisabled struct {
}

// IsSuccess returns true when this get healthz disabled response has a 2xx status code
func (o *GetHealthzDisabled) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get healthz disabled response has a 3xx status code
func (o *GetHealthzDisabled) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get healthz disabled response has a 4xx status code
func (o *GetHealthzDisabled) IsClientError() bool {
	return true
}

// IsServerError returns true when this get healthz disabled response has a 5xx status code
func (o *GetHealthzDisabled) IsServerError() bool {
	return false
}

// IsCode returns true when this get healthz disabled response a status code equal to that given
func (o *GetHealthzDisabled) IsCode(code int) bool {
	return code == 404
}

func (o *GetHealthzDisabled) Error() string {
	return fmt.Sprintf("[GET /healthz][%d] getHealthzDisabled ", 404)
}

func (o *GetHealthzDisabled) String() string {
	return fmt.Sprintf("[GET /healthz][%d] getHealthzDisabled ", 404)
}

func (o *GetHealthzDisabled) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHealthzFailure creates a GetHealthzFailure with default headers values
func NewGetHealthzFailure() *GetHealthzFailure {
	return &GetHealthzFailure{}
}

/*
GetHealthzFailure describes a response with status code 500, with default header values.

Internal server error
*/
type GetHealthzFailure struct {
	Payload models.Error
}

// IsSuccess returns true when this get healthz failure response has a 2xx status code
func (o *GetHealthzFailure) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get healthz failure response has a 3xx status code
func (o *GetHealthzFailure) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get healthz failure response has a 4xx status code
func (o *GetHealthzFailure) IsClientError() bool {
	return false
}

// IsServerError returns true when this get healthz failure response has a 5xx status code
func (o *GetHealthzFailure) IsServerError() bool {
	return true
}

// IsCode returns true when this get healthz failure response a status code equal to that given
func (o *GetHealthzFailure) IsCode(code int) bool {
	return code == 500
}

func (o *GetHealthzFailure) Error() string {
	return fmt.Sprintf("[GET /healthz][%d] getHealthzFailure  %+v", 500, o.Payload)
}

func (o *GetHealthzFailure) String() string {
	return fmt.Sprintf("[GET /healthz][%d] getHealthzFailure  %+v", 500, o.Payload)
}

func (o *GetHealthzFailure) GetPayload() models.Error {
	return o.Payload
}

func (o *GetHealthzFailure) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
