// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/cilium/cilium/pkg/k8s/apis/isovalent.com/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeIsovalentSRv6EgressPolicies implements IsovalentSRv6EgressPolicyInterface
type FakeIsovalentSRv6EgressPolicies struct {
	Fake *FakeIsovalentV1alpha1
}

var isovalentsrv6egresspoliciesResource = v1alpha1.SchemeGroupVersion.WithResource("isovalentsrv6egresspolicies")

var isovalentsrv6egresspoliciesKind = v1alpha1.SchemeGroupVersion.WithKind("IsovalentSRv6EgressPolicy")

// Get takes name of the isovalentSRv6EgressPolicy, and returns the corresponding isovalentSRv6EgressPolicy object, and an error if there is any.
func (c *FakeIsovalentSRv6EgressPolicies) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.IsovalentSRv6EgressPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(isovalentsrv6egresspoliciesResource, name), &v1alpha1.IsovalentSRv6EgressPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IsovalentSRv6EgressPolicy), err
}

// List takes label and field selectors, and returns the list of IsovalentSRv6EgressPolicies that match those selectors.
func (c *FakeIsovalentSRv6EgressPolicies) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.IsovalentSRv6EgressPolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(isovalentsrv6egresspoliciesResource, isovalentsrv6egresspoliciesKind, opts), &v1alpha1.IsovalentSRv6EgressPolicyList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.IsovalentSRv6EgressPolicyList{ListMeta: obj.(*v1alpha1.IsovalentSRv6EgressPolicyList).ListMeta}
	for _, item := range obj.(*v1alpha1.IsovalentSRv6EgressPolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested isovalentSRv6EgressPolicies.
func (c *FakeIsovalentSRv6EgressPolicies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(isovalentsrv6egresspoliciesResource, opts))
}

// Create takes the representation of a isovalentSRv6EgressPolicy and creates it.  Returns the server's representation of the isovalentSRv6EgressPolicy, and an error, if there is any.
func (c *FakeIsovalentSRv6EgressPolicies) Create(ctx context.Context, isovalentSRv6EgressPolicy *v1alpha1.IsovalentSRv6EgressPolicy, opts v1.CreateOptions) (result *v1alpha1.IsovalentSRv6EgressPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(isovalentsrv6egresspoliciesResource, isovalentSRv6EgressPolicy), &v1alpha1.IsovalentSRv6EgressPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IsovalentSRv6EgressPolicy), err
}

// Update takes the representation of a isovalentSRv6EgressPolicy and updates it. Returns the server's representation of the isovalentSRv6EgressPolicy, and an error, if there is any.
func (c *FakeIsovalentSRv6EgressPolicies) Update(ctx context.Context, isovalentSRv6EgressPolicy *v1alpha1.IsovalentSRv6EgressPolicy, opts v1.UpdateOptions) (result *v1alpha1.IsovalentSRv6EgressPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(isovalentsrv6egresspoliciesResource, isovalentSRv6EgressPolicy), &v1alpha1.IsovalentSRv6EgressPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IsovalentSRv6EgressPolicy), err
}

// Delete takes name of the isovalentSRv6EgressPolicy and deletes it. Returns an error if one occurs.
func (c *FakeIsovalentSRv6EgressPolicies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(isovalentsrv6egresspoliciesResource, name, opts), &v1alpha1.IsovalentSRv6EgressPolicy{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIsovalentSRv6EgressPolicies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(isovalentsrv6egresspoliciesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.IsovalentSRv6EgressPolicyList{})
	return err
}

// Patch applies the patch and returns the patched isovalentSRv6EgressPolicy.
func (c *FakeIsovalentSRv6EgressPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.IsovalentSRv6EgressPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(isovalentsrv6egresspoliciesResource, name, pt, data, subresources...), &v1alpha1.IsovalentSRv6EgressPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IsovalentSRv6EgressPolicy), err
}
