// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/cilium/cilium/pkg/k8s/apis/isovalent.com/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeIsovalentBFDNodeConfigs implements IsovalentBFDNodeConfigInterface
type FakeIsovalentBFDNodeConfigs struct {
	Fake *FakeIsovalentV1alpha1
}

var isovalentbfdnodeconfigsResource = v1alpha1.SchemeGroupVersion.WithResource("isovalentbfdnodeconfigs")

var isovalentbfdnodeconfigsKind = v1alpha1.SchemeGroupVersion.WithKind("IsovalentBFDNodeConfig")

// Get takes name of the isovalentBFDNodeConfig, and returns the corresponding isovalentBFDNodeConfig object, and an error if there is any.
func (c *FakeIsovalentBFDNodeConfigs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.IsovalentBFDNodeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(isovalentbfdnodeconfigsResource, name), &v1alpha1.IsovalentBFDNodeConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IsovalentBFDNodeConfig), err
}

// List takes label and field selectors, and returns the list of IsovalentBFDNodeConfigs that match those selectors.
func (c *FakeIsovalentBFDNodeConfigs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.IsovalentBFDNodeConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(isovalentbfdnodeconfigsResource, isovalentbfdnodeconfigsKind, opts), &v1alpha1.IsovalentBFDNodeConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.IsovalentBFDNodeConfigList{ListMeta: obj.(*v1alpha1.IsovalentBFDNodeConfigList).ListMeta}
	for _, item := range obj.(*v1alpha1.IsovalentBFDNodeConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested isovalentBFDNodeConfigs.
func (c *FakeIsovalentBFDNodeConfigs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(isovalentbfdnodeconfigsResource, opts))
}

// Create takes the representation of a isovalentBFDNodeConfig and creates it.  Returns the server's representation of the isovalentBFDNodeConfig, and an error, if there is any.
func (c *FakeIsovalentBFDNodeConfigs) Create(ctx context.Context, isovalentBFDNodeConfig *v1alpha1.IsovalentBFDNodeConfig, opts v1.CreateOptions) (result *v1alpha1.IsovalentBFDNodeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(isovalentbfdnodeconfigsResource, isovalentBFDNodeConfig), &v1alpha1.IsovalentBFDNodeConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IsovalentBFDNodeConfig), err
}

// Update takes the representation of a isovalentBFDNodeConfig and updates it. Returns the server's representation of the isovalentBFDNodeConfig, and an error, if there is any.
func (c *FakeIsovalentBFDNodeConfigs) Update(ctx context.Context, isovalentBFDNodeConfig *v1alpha1.IsovalentBFDNodeConfig, opts v1.UpdateOptions) (result *v1alpha1.IsovalentBFDNodeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(isovalentbfdnodeconfigsResource, isovalentBFDNodeConfig), &v1alpha1.IsovalentBFDNodeConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IsovalentBFDNodeConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeIsovalentBFDNodeConfigs) UpdateStatus(ctx context.Context, isovalentBFDNodeConfig *v1alpha1.IsovalentBFDNodeConfig, opts v1.UpdateOptions) (*v1alpha1.IsovalentBFDNodeConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(isovalentbfdnodeconfigsResource, "status", isovalentBFDNodeConfig), &v1alpha1.IsovalentBFDNodeConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IsovalentBFDNodeConfig), err
}

// Delete takes name of the isovalentBFDNodeConfig and deletes it. Returns an error if one occurs.
func (c *FakeIsovalentBFDNodeConfigs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(isovalentbfdnodeconfigsResource, name, opts), &v1alpha1.IsovalentBFDNodeConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIsovalentBFDNodeConfigs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(isovalentbfdnodeconfigsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.IsovalentBFDNodeConfigList{})
	return err
}

// Patch applies the patch and returns the patched isovalentBFDNodeConfig.
func (c *FakeIsovalentBFDNodeConfigs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.IsovalentBFDNodeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(isovalentbfdnodeconfigsResource, name, pt, data, subresources...), &v1alpha1.IsovalentBFDNodeConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IsovalentBFDNodeConfig), err
}
