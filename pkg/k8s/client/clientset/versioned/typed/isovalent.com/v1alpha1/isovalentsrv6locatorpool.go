// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/cilium/cilium/pkg/k8s/apis/isovalent.com/v1alpha1"
	scheme "github.com/cilium/cilium/pkg/k8s/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// IsovalentSRv6LocatorPoolsGetter has a method to return a IsovalentSRv6LocatorPoolInterface.
// A group's client should implement this interface.
type IsovalentSRv6LocatorPoolsGetter interface {
	IsovalentSRv6LocatorPools() IsovalentSRv6LocatorPoolInterface
}

// IsovalentSRv6LocatorPoolInterface has methods to work with IsovalentSRv6LocatorPool resources.
type IsovalentSRv6LocatorPoolInterface interface {
	Create(ctx context.Context, isovalentSRv6LocatorPool *v1alpha1.IsovalentSRv6LocatorPool, opts v1.CreateOptions) (*v1alpha1.IsovalentSRv6LocatorPool, error)
	Update(ctx context.Context, isovalentSRv6LocatorPool *v1alpha1.IsovalentSRv6LocatorPool, opts v1.UpdateOptions) (*v1alpha1.IsovalentSRv6LocatorPool, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.IsovalentSRv6LocatorPool, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.IsovalentSRv6LocatorPoolList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.IsovalentSRv6LocatorPool, err error)
	IsovalentSRv6LocatorPoolExpansion
}

// isovalentSRv6LocatorPools implements IsovalentSRv6LocatorPoolInterface
type isovalentSRv6LocatorPools struct {
	*gentype.ClientWithList[*v1alpha1.IsovalentSRv6LocatorPool, *v1alpha1.IsovalentSRv6LocatorPoolList]
}

// newIsovalentSRv6LocatorPools returns a IsovalentSRv6LocatorPools
func newIsovalentSRv6LocatorPools(c *IsovalentV1alpha1Client) *isovalentSRv6LocatorPools {
	return &isovalentSRv6LocatorPools{
		gentype.NewClientWithList[*v1alpha1.IsovalentSRv6LocatorPool, *v1alpha1.IsovalentSRv6LocatorPoolList](
			"isovalentsrv6locatorpools",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1alpha1.IsovalentSRv6LocatorPool { return &v1alpha1.IsovalentSRv6LocatorPool{} },
			func() *v1alpha1.IsovalentSRv6LocatorPoolList { return &v1alpha1.IsovalentSRv6LocatorPoolList{} }),
	}
}
