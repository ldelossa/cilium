//  Copyright (C) Isovalent, Inc. - All Rights Reserved.
//
//  NOTICE: All information contained herein is, and remains the property of
//  Isovalent Inc and its suppliers, if any. The intellectual and technical
//  concepts contained herein are proprietary to Isovalent Inc and its suppliers
//  and may be covered by U.S. and Foreign Patents, patents in process, and are
//  protected by trade secret or copyright law.  Dissemination of this information
//  or reproduction of this material is strictly forbidden unless prior written
//  permission is obtained from Isovalent Inc.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: dnsproxy/dnsproxy.proto

package dnsproxy

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RestoredRulesMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules map[uint64]*RestoredRules `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RestoredRulesMap) Reset() {
	*x = RestoredRulesMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoredRulesMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoredRulesMap) ProtoMessage() {}

func (x *RestoredRulesMap) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoredRulesMap.ProtoReflect.Descriptor instead.
func (*RestoredRulesMap) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{0}
}

func (x *RestoredRulesMap) GetRules() map[uint64]*RestoredRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

type RestoredRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules map[uint32]*IPRules `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RestoredRules) Reset() {
	*x = RestoredRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoredRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoredRules) ProtoMessage() {}

func (x *RestoredRules) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoredRules.ProtoReflect.Descriptor instead.
func (*RestoredRules) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{1}
}

func (x *RestoredRules) GetRules() map[uint32]*IPRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

type IPRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IPRule `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IPRules) Reset() {
	*x = IPRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPRules) ProtoMessage() {}

func (x *IPRules) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPRules.ProtoReflect.Descriptor instead.
func (*IPRules) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{2}
}

func (x *IPRules) GetList() []*IPRule {
	if x != nil {
		return x.List
	}
	return nil
}

type IPRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex string   `protobuf:"bytes,1,opt,name=regex,proto3" json:"regex,omitempty"`
	Ips   []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *IPRule) Reset() {
	*x = IPRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPRule) ProtoMessage() {}

func (x *IPRule) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPRule.ProtoReflect.Descriptor instead.
func (*IPRule) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{3}
}

func (x *IPRule) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *IPRule) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type EndpointID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointID uint32 `protobuf:"varint,1,opt,name=endpointID,proto3" json:"endpointID,omitempty"`
}

func (x *EndpointID) Reset() {
	*x = EndpointID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointID) ProtoMessage() {}

func (x *EndpointID) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointID.ProtoReflect.Descriptor instead.
func (*EndpointID) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{4}
}

func (x *EndpointID) GetEndpointID() uint32 {
	if x != nil {
		return x.EndpointID
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{5}
}

type FQDNRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointID uint64   `protobuf:"varint,1,opt,name=endpointID,proto3" json:"endpointID,omitempty"`
	DestPort   uint32   `protobuf:"varint,2,opt,name=destPort,proto3" json:"destPort,omitempty"`
	Rules      *L7Rules `protobuf:"bytes,3,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *FQDNRules) Reset() {
	*x = FQDNRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FQDNRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FQDNRules) ProtoMessage() {}

func (x *FQDNRules) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FQDNRules.ProtoReflect.Descriptor instead.
func (*FQDNRules) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{6}
}

func (x *FQDNRules) GetEndpointID() uint64 {
	if x != nil {
		return x.EndpointID
	}
	return 0
}

func (x *FQDNRules) GetDestPort() uint32 {
	if x != nil {
		return x.DestPort
	}
	return 0
}

func (x *FQDNRules) GetRules() *L7Rules {
	if x != nil {
		return x.Rules
	}
	return nil
}

type L7Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectorRegexMapping      map[string]string        `protobuf:"bytes,1,rep,name=SelectorRegexMapping,proto3" json:"SelectorRegexMapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SelectorIdentitiesMapping map[string]*IdentityList `protobuf:"bytes,2,rep,name=SelectorIdentitiesMapping,proto3" json:"SelectorIdentitiesMapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *L7Rules) Reset() {
	*x = L7Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L7Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L7Rules) ProtoMessage() {}

func (x *L7Rules) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L7Rules.ProtoReflect.Descriptor instead.
func (*L7Rules) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{7}
}

func (x *L7Rules) GetSelectorRegexMapping() map[string]string {
	if x != nil {
		return x.SelectorRegexMapping
	}
	return nil
}

func (x *L7Rules) GetSelectorIdentitiesMapping() map[string]*IdentityList {
	if x != nil {
		return x.SelectorIdentitiesMapping
	}
	return nil
}

type IdentityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []uint32 `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
}

func (x *IdentityList) Reset() {
	*x = IdentityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityList) ProtoMessage() {}

func (x *IdentityList) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityList.ProtoReflect.Descriptor instead.
func (*IdentityList) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{8}
}

func (x *IdentityList) GetList() []uint32 {
	if x != nil {
		return x.List
	}
	return nil
}

type DNSNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Endpoint   *Endpoint            `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	EpIPPort   string               `protobuf:"bytes,3,opt,name=epIPPort,proto3" json:"epIPPort,omitempty"`
	ServerAddr string               `protobuf:"bytes,4,opt,name=serverAddr,proto3" json:"serverAddr,omitempty"`
	Msg        []byte               `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	Protocol   string               `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Allowed    bool                 `protobuf:"varint,7,opt,name=allowed,proto3" json:"allowed,omitempty"`
	ServerID   uint32               `protobuf:"varint,8,opt,name=serverID,proto3" json:"serverID,omitempty"`
}

func (x *DNSNotification) Reset() {
	*x = DNSNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSNotification) ProtoMessage() {}

func (x *DNSNotification) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSNotification.ProtoReflect.Descriptor instead.
func (*DNSNotification) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{9}
}

func (x *DNSNotification) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DNSNotification) GetEndpoint() *Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *DNSNotification) GetEpIPPort() string {
	if x != nil {
		return x.EpIPPort
	}
	return ""
}

func (x *DNSNotification) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

func (x *DNSNotification) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *DNSNotification) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DNSNotification) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *DNSNotification) GetServerID() uint32 {
	if x != nil {
		return x.ServerID
	}
	return 0
}

type IPs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPs [][]byte `protobuf:"bytes,1,rep,name=IPs,proto3" json:"IPs,omitempty"`
}

func (x *IPs) Reset() {
	*x = IPs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPs) ProtoMessage() {}

func (x *IPs) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPs.ProtoReflect.Descriptor instead.
func (*IPs) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{10}
}

func (x *IPs) GetIPs() [][]byte {
	if x != nil {
		return x.IPs
	}
	return nil
}

type FQDN_IP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP []byte `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *FQDN_IP) Reset() {
	*x = FQDN_IP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FQDN_IP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FQDN_IP) ProtoMessage() {}

func (x *FQDN_IP) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FQDN_IP.ProtoReflect.Descriptor instead.
func (*FQDN_IP) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{11}
}

func (x *FQDN_IP) GetIP() []byte {
	if x != nil {
		return x.IP
	}
	return nil
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
	Exists bool   `protobuf:"varint,3,opt,name=Exists,proto3" json:"Exists,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{12}
}

func (x *Identity) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Identity) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Identity) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type FQDNMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP   []byte `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	FQDN string `protobuf:"bytes,2,opt,name=FQDN,proto3" json:"FQDN,omitempty"`
}

func (x *FQDNMapping) Reset() {
	*x = FQDNMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FQDNMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FQDNMapping) ProtoMessage() {}

func (x *FQDNMapping) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FQDNMapping.ProtoReflect.Descriptor instead.
func (*FQDNMapping) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{13}
}

func (x *FQDNMapping) GetIP() []byte {
	if x != nil {
		return x.IP
	}
	return nil
}

func (x *FQDNMapping) GetFQDN() string {
	if x != nil {
		return x.FQDN
	}
	return ""
}

type Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Success) Reset() {
	*x = Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Success) ProtoMessage() {}

func (x *Success) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Success.ProtoReflect.Descriptor instead.
func (*Success) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{14}
}

func (x *Success) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Identity  uint32 `protobuf:"varint,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// labels in `foo=bar` format.
	Labels    []string    `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	PodName   string      `protobuf:"bytes,5,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	Workloads []*Workload `protobuf:"bytes,6,rep,name=workloads,proto3" json:"workloads,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{15}
}

func (x *Endpoint) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Endpoint) GetIdentity() uint32 {
	if x != nil {
		return x.Identity
	}
	return 0
}

func (x *Endpoint) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Endpoint) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Endpoint) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *Endpoint) GetWorkloads() []*Workload {
	if x != nil {
		return x.Workloads
	}
	return nil
}

type Workload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *Workload) Reset() {
	*x = Workload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dnsproxy_dnsproxy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workload) ProtoMessage() {}

func (x *Workload) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workload.ProtoReflect.Descriptor instead.
func (*Workload) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{16}
}

func (x *Workload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workload) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

var File_dnsproxy_dnsproxy_proto protoreflect.FileDescriptor

var file_dnsproxy_dnsproxy_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x64, 0x6e, 0x73, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64, 0x6e, 0x73, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x4d, 0x61, 0x70, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x51, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6e, 0x73,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x4b, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x49, 0x50, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x2f, 0x0a, 0x07, 0x49, 0x50, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6e,
	0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x49, 0x50, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x06, 0x49, 0x50, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x70, 0x0a, 0x09,
	0x46, 0x51, 0x44, 0x4e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x4c, 0x37, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x89,
	0x03, 0x0a, 0x07, 0x4c, 0x37, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x14, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x37, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x6e, 0x0a, 0x19, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x37, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x19, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x47, 0x0a, 0x19, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x1e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x22, 0x0a, 0x0c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x91,
	0x02, 0x0a, 0x0f, 0x44, 0x4e, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x70, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x17, 0x0a, 0x03, 0x49, 0x50, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x50, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x49, 0x50, 0x73, 0x22, 0x19, 0x0a, 0x07, 0x46,
	0x51, 0x44, 0x4e, 0x5f, 0x49, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x49, 0x50, 0x22, 0x4a, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x31, 0x0a, 0x0b, 0x46, 0x51, 0x44, 0x4e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49,
	0x50, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x51, 0x44, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x46, 0x51, 0x44, 0x4e, 0x22, 0x21, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x32, 0x9d, 0x03, 0x0a, 0x0e, 0x46, 0x51, 0x44,
	0x4e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x15,
	0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x46, 0x51, 0x44, 0x4e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x11, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3d, 0x0a, 0x12,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x50, 0x12, 0x11, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x46, 0x51,
	0x44, 0x4e, 0x5f, 0x49, 0x50, 0x1a, 0x12, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x1a, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x50, 0x12, 0x11, 0x2e, 0x64, 0x6e, 0x73, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x46, 0x51, 0x44, 0x4e, 0x5f, 0x49, 0x50, 0x1a, 0x12, 0x2e, 0x64,
	0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x1b, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x50, 0x73, 0x42,
	0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x49, 0x50, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4f, 0x6e, 0x44, 0x4e, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x64,
	0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x44, 0x4e, 0x53, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x64, 0x6e, 0x73, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x64, 0x6e, 0x73,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x32, 0xc1, 0x01, 0x0a, 0x09, 0x46, 0x51, 0x44,
	0x4e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x37, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x13, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x46, 0x51, 0x44, 0x4e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x0f, 0x2e, 0x64,
	0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x64,
	0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x64, 0x6e,
	0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x44, 0x1a, 0x17, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x73, 0x6f, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x71, 0x64, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dnsproxy_dnsproxy_proto_rawDescOnce sync.Once
	file_dnsproxy_dnsproxy_proto_rawDescData = file_dnsproxy_dnsproxy_proto_rawDesc
)

func file_dnsproxy_dnsproxy_proto_rawDescGZIP() []byte {
	file_dnsproxy_dnsproxy_proto_rawDescOnce.Do(func() {
		file_dnsproxy_dnsproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_dnsproxy_dnsproxy_proto_rawDescData)
	})
	return file_dnsproxy_dnsproxy_proto_rawDescData
}

var file_dnsproxy_dnsproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_dnsproxy_dnsproxy_proto_goTypes = []interface{}{
	(*RestoredRulesMap)(nil),    // 0: dnsproxy.RestoredRulesMap
	(*RestoredRules)(nil),       // 1: dnsproxy.RestoredRules
	(*IPRules)(nil),             // 2: dnsproxy.IPRules
	(*IPRule)(nil),              // 3: dnsproxy.IPRule
	(*EndpointID)(nil),          // 4: dnsproxy.EndpointID
	(*Empty)(nil),               // 5: dnsproxy.Empty
	(*FQDNRules)(nil),           // 6: dnsproxy.FQDNRules
	(*L7Rules)(nil),             // 7: dnsproxy.L7Rules
	(*IdentityList)(nil),        // 8: dnsproxy.IdentityList
	(*DNSNotification)(nil),     // 9: dnsproxy.DNSNotification
	(*IPs)(nil),                 // 10: dnsproxy.IPs
	(*FQDN_IP)(nil),             // 11: dnsproxy.FQDN_IP
	(*Identity)(nil),            // 12: dnsproxy.Identity
	(*FQDNMapping)(nil),         // 13: dnsproxy.FQDNMapping
	(*Success)(nil),             // 14: dnsproxy.Success
	(*Endpoint)(nil),            // 15: dnsproxy.Endpoint
	(*Workload)(nil),            // 16: dnsproxy.Workload
	nil,                         // 17: dnsproxy.RestoredRulesMap.RulesEntry
	nil,                         // 18: dnsproxy.RestoredRules.RulesEntry
	nil,                         // 19: dnsproxy.L7Rules.SelectorRegexMappingEntry
	nil,                         // 20: dnsproxy.L7Rules.SelectorIdentitiesMappingEntry
	(*timestamp.Timestamp)(nil), // 21: google.protobuf.Timestamp
}
var file_dnsproxy_dnsproxy_proto_depIdxs = []int32{
	17, // 0: dnsproxy.RestoredRulesMap.rules:type_name -> dnsproxy.RestoredRulesMap.RulesEntry
	18, // 1: dnsproxy.RestoredRules.rules:type_name -> dnsproxy.RestoredRules.RulesEntry
	3,  // 2: dnsproxy.IPRules.list:type_name -> dnsproxy.IPRule
	7,  // 3: dnsproxy.FQDNRules.rules:type_name -> dnsproxy.L7Rules
	19, // 4: dnsproxy.L7Rules.SelectorRegexMapping:type_name -> dnsproxy.L7Rules.SelectorRegexMappingEntry
	20, // 5: dnsproxy.L7Rules.SelectorIdentitiesMapping:type_name -> dnsproxy.L7Rules.SelectorIdentitiesMappingEntry
	21, // 6: dnsproxy.DNSNotification.time:type_name -> google.protobuf.Timestamp
	15, // 7: dnsproxy.DNSNotification.endpoint:type_name -> dnsproxy.Endpoint
	16, // 8: dnsproxy.Endpoint.workloads:type_name -> dnsproxy.Workload
	1,  // 9: dnsproxy.RestoredRulesMap.RulesEntry.value:type_name -> dnsproxy.RestoredRules
	2,  // 10: dnsproxy.RestoredRules.RulesEntry.value:type_name -> dnsproxy.IPRules
	8,  // 11: dnsproxy.L7Rules.SelectorIdentitiesMappingEntry.value:type_name -> dnsproxy.IdentityList
	13, // 12: dnsproxy.FQDNProxyAgent.ProvideMappings:input_type -> dnsproxy.FQDNMapping
	11, // 13: dnsproxy.FQDNProxyAgent.LookupEndpointByIP:input_type -> dnsproxy.FQDN_IP
	11, // 14: dnsproxy.FQDNProxyAgent.LookupSecurityIdentityByIP:input_type -> dnsproxy.FQDN_IP
	12, // 15: dnsproxy.FQDNProxyAgent.LookupIPsBySecurityIdentity:input_type -> dnsproxy.Identity
	9,  // 16: dnsproxy.FQDNProxyAgent.NotifyOnDNSMessage:input_type -> dnsproxy.DNSNotification
	5,  // 17: dnsproxy.FQDNProxyAgent.GetAllRules:input_type -> dnsproxy.Empty
	6,  // 18: dnsproxy.FQDNProxy.UpdateAllowed:input_type -> dnsproxy.FQDNRules
	4,  // 19: dnsproxy.FQDNProxy.RemoveRestoredRules:input_type -> dnsproxy.EndpointID
	4,  // 20: dnsproxy.FQDNProxy.GetRules:input_type -> dnsproxy.EndpointID
	14, // 21: dnsproxy.FQDNProxyAgent.ProvideMappings:output_type -> dnsproxy.Success
	15, // 22: dnsproxy.FQDNProxyAgent.LookupEndpointByIP:output_type -> dnsproxy.Endpoint
	12, // 23: dnsproxy.FQDNProxyAgent.LookupSecurityIdentityByIP:output_type -> dnsproxy.Identity
	10, // 24: dnsproxy.FQDNProxyAgent.LookupIPsBySecurityIdentity:output_type -> dnsproxy.IPs
	5,  // 25: dnsproxy.FQDNProxyAgent.NotifyOnDNSMessage:output_type -> dnsproxy.Empty
	0,  // 26: dnsproxy.FQDNProxyAgent.GetAllRules:output_type -> dnsproxy.RestoredRulesMap
	5,  // 27: dnsproxy.FQDNProxy.UpdateAllowed:output_type -> dnsproxy.Empty
	5,  // 28: dnsproxy.FQDNProxy.RemoveRestoredRules:output_type -> dnsproxy.Empty
	1,  // 29: dnsproxy.FQDNProxy.GetRules:output_type -> dnsproxy.RestoredRules
	21, // [21:30] is the sub-list for method output_type
	12, // [12:21] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_dnsproxy_dnsproxy_proto_init() }
func file_dnsproxy_dnsproxy_proto_init() {
	if File_dnsproxy_dnsproxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dnsproxy_dnsproxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoredRulesMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoredRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FQDNRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L7Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FQDN_IP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FQDNMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dnsproxy_dnsproxy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dnsproxy_dnsproxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_dnsproxy_dnsproxy_proto_goTypes,
		DependencyIndexes: file_dnsproxy_dnsproxy_proto_depIdxs,
		MessageInfos:      file_dnsproxy_dnsproxy_proto_msgTypes,
	}.Build()
	File_dnsproxy_dnsproxy_proto = out.File
	file_dnsproxy_dnsproxy_proto_rawDesc = nil
	file_dnsproxy_dnsproxy_proto_goTypes = nil
	file_dnsproxy_dnsproxy_proto_depIdxs = nil
}
