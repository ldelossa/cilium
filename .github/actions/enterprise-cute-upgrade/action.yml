name: CuTE upgrade
description: CuTE upgrade
inputs:
  deploy:
    description: 'Source for the version of Cilium to deploy to (more: https://www.notion.so/isovalent/Customer-Test-Environment-CuTE-43a53c6e2b984c5fb299d7e728ee862f?pvs=4#03f75075d3104abca337917756db64e6)'
    required: true
  upgrade:
    description: 'Source for the version of Cilium to upgrade to (more: https://www.notion.so/isovalent/Customer-Test-Environment-CuTE-43a53c6e2b984c5fb299d7e728ee862f?pvs=4#edcb54b618ac4c1ea83d0521ef5e04a8)'
    required: true
  upgrade-target:
    description: 'Version of Cilium to upgrade to (inferred from `upgrade` param, e.g. v1.2.3)'
    required: true
  helm-version:
    description: 'Cilium Helm chart version.'
    required: true
  umbrella-chart-path:
    description: 'Path to Cilium umbrella Helm chart.'
    required: true
  cute-dir:
    description: 'Directory with a CuTE code/config.'
    required: true
  quay-org:
    description: 'Quay repo organization.'
    required: true
runs:
  using: composite
  steps:
    - name: CuTE Terraform variables file for existing Helm version
      if: inputs.upgrade != 'current' && inputs.upgrade != 'latest'
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        if [[ "${{ inputs.deploy }}" == "cute" ]]; then
          echo "cilium_helm_version=\"${{ inputs.upgrade-target }}\"" >> terraform.tfvars
          # the below variables are for cluster mesh scenario
          echo "cilium_helm_version_1=\"${{ inputs.upgrade-target }}\"" >> terraform.tfvars
          echo "cilium_helm_version_2=\"${{ inputs.upgrade-target }}\"" >> terraform.tfvars
        else
          sed -i.bak "s/^cilium_helm_version=.*/cilium_helm_version=\"${{ inputs.upgrade-target }}\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_1=.*/cilium_helm_version_1=\"${{ inputs.upgrade-target }}\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_2=.*/cilium_helm_version_2=\"${{ inputs.upgrade-target }}\"/g" terraform.tfvars
        fi
        cat terraform.tfvars

    - name: CuTE Terraform variables file for non-existing Helm version
      if: inputs.upgrade == 'current' || inputs.upgrade == 'latest'
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        HELM_CHART_VERSION=${{ inputs.helm-version }}
        if [[ -n "${{ inputs.umbrella-chart-path }}" ]]; then
          HELM_CHART=${{ inputs.umbrella-chart-path }}
        fi
          if [[ "${{ inputs.deploy }}" == "cute" ]]; then
          echo "cilium_helm_chart=\"oci://${{ env.helm_registry }}/${{ inputs.quay-org }}/cilium\"" >> terraform.tfvars
          echo "cilium_helm_version=\"$HELM_CHART_VERSION\"" >> terraform.tfvars
          # the below variables are for cluster mesh scenario
          echo "cilium_helm_version_1=\"$HELM_CHART_VERSION\"" >> terraform.tfvars
          echo "cilium_helm_version_2=\"$HELM_CHART_VERSION\"" >> terraform.tfvars
        else
          sed -i.bak "s/^cilium_helm_version=.*/cilium_helm_version=\"$HELM_CHART_VERSION\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_1=.*/cilium_helm_version_1=\"$HELM_CHART_VERSION\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_2=.*/cilium_helm_version_2=\"$HELM_CHART_VERSION\"/g" terraform.tfvars
        fi
        cat terraform.tfvars

    - name: CuTE upgrade
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        make upgrade AUTO_APPROVE=true

    - name: Wait for Cilium to be ready
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        cilium status --wait 15m0s
