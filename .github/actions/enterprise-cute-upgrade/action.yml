name: CuTE upgrade
description: CuTE upgrade
inputs:
  deploy:
    description: 'Source for the version of Cilium to deploy to (more: https://www.notion.so/isovalent/Customer-Test-Environment-CuTE-43a53c6e2b984c5fb299d7e728ee862f?pvs=4#03f75075d3104abca337917756db64e6)'
    required: true
  upgrade:
    description: 'Source for the version of Cilium to upgrade to (more: https://www.notion.so/isovalent/Customer-Test-Environment-CuTE-43a53c6e2b984c5fb299d7e728ee862f?pvs=4#edcb54b618ac4c1ea83d0521ef5e04a8)'
    required: true
  upgrade-target:
    description: 'Version of Cilium to upgrade to (inferred from `upgrade` param, e.g. v1.2.3)'
    required: true
  helm-version:
    description: 'Cilium Helm chart version.'
    required: true
  umbrella-chart-path:
    description: 'Path to Cilium umbrella Helm chart.'
    required: true
  cute-dir:
    description: 'Directory with a CuTE code/config.'
    required: true
  quay-org:
    description: 'Quay repo organization.'
    required: true
runs:
  using: composite
  steps:
    - name: Run conn-disrupt-test
      shell: bash
      run: |
        # Create pods which establish long lived connections. It will be used by
        # subsequent connectivity tests with --include-conn-disrupt-test to catch any
        # interruption in such flows.
        cilium connectivity test --include-conn-disrupt-test --conn-disrupt-test-setup

    - name: Helm chart
      id: helm
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        HELM_CHART="oci://${{ env.helm_registry }}/${{ inputs.quay-org }}/cilium"
        [[ -n "${{ inputs.umbrella-chart-path }}" ]] && HELM_CHART=${{ inputs.umbrella-chart-path }}
        echo chart=$HELM_CHART >> $GITHUB_OUTPUT

    - name: Terraform variables [current or latest]
      if: inputs.upgrade == 'current' || inputs.upgrade == 'latest'
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        # In case of `cute` deploy type both Helm chart and version need to be added
        if [[ "${{ inputs.deploy }}" == "cute" ]]; then
          echo "cilium_helm_chart=\"${{ steps.helm.outputs.chart }}\"" >> terraform.tfvars
          echo "cilium_helm_version=\"${{ inputs.helm-version }}\"" >> terraform.tfvars
          # the below variables are for cluster mesh scenario
          echo "cilium_helm_version_1=\"${{ inputs.helm-version }}\"" >> terraform.tfvars
          echo "cilium_helm_version_2=\"${{ inputs.helm-version }}\"" >> terraform.tfvars
        # In case of `current` or `latest` deploy types both Helm chart and version need to be modified
        elif [[ "${{ inputs.deploy }}" == "current" ]] || [[ "${{ inputs.deploy }}" == "latest" ]]; then
          sed -i.bak '/^cilium_helm_chart/d' terraform.tfvars
          echo "cilium_helm_chart=\"${{ steps.helm.outputs.chart }}\"" >> terraform.tfvars
          sed -i.bak "s/^cilium_helm_version=.*/cilium_helm_version=\"${{ inputs.helm-version }}\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_1=.*/cilium_helm_version_1=\"${{ inputs.helm-version }}\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_2=.*/cilium_helm_version_2=\"${{ inputs.helm-version }}\"/g" terraform.tfvars
        # In case of `stable` or `<version>` deploy types Helm chart needs to be added and version needs to be modified
        else
          echo "cilium_helm_chart=\"${{ steps.helm.outputs.chart }}\"" >> terraform.tfvars
          sed -i.bak "s/^cilium_helm_version=.*/cilium_helm_version=\"${{ inputs.helm-version }}\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_1=.*/cilium_helm_version_1=\"${{ inputs.helm-version }}\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_2=.*/cilium_helm_version_2=\"${{ inputs.helm-version }}\"/g" terraform.tfvars
        fi

    - name: Terraform variables [stable or <version>]
      if: inputs.upgrade != 'current' && inputs.upgrade != 'latest'
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        # In case of `cute` deploy type Helm version need to be added
        if [[ "${{ inputs.deploy }}" == "cute" ]]; then
          echo "cilium_helm_version=\"${{ inputs.upgrade-target }}\"" >> terraform.tfvars
          # the below variables are for cluster mesh scenario
          echo "cilium_helm_version_1=\"${{ inputs.upgrade-target }}\"" >> terraform.tfvars
          echo "cilium_helm_version_2=\"${{ inputs.upgrade-target }}\"" >> terraform.tfvars
        # In case of `current` or `latest` deploy types Helm chart needs to be removes and version need to be modified
        elif [[ "${{ inputs.deploy }}" == "current" ]] || [[ "${{ inputs.deploy }}" == "latest" ]]; then
          sed -i.bak '/^cilium_helm_chart/d' terraform.tfvars
          sed -i.bak "s/^cilium_helm_version=.*/cilium_helm_version=\"${{ inputs.upgrade-target }}\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_1=.*/cilium_helm_version_1=\"${{ inputs.upgrade-target }}\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_2=.*/cilium_helm_version_2=\"${{ inputs.upgrade-target }}\"/g" terraform.tfvars
        # In case of `stable` or `<version>` deploy types Helm version needs to be modified
        else
          sed -i.bak "s/^cilium_helm_version=.*/cilium_helm_version=\"${{ inputs.upgrade-target }}\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_1=.*/cilium_helm_version_1=\"${{ inputs.upgrade-target }}\"/g" terraform.tfvars
          sed -i.bak "s/^cilium_helm_version_2=.*/cilium_helm_version_2=\"${{ inputs.upgrade-target }}\"/g" terraform.tfvars
        fi

    - name: Display Terraform variables file
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        cat terraform.tfvars

    - name: CuTE upgrade
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        make upgrade AUTO_APPROVE=true

    - name: Wait for Cilium to be ready
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        cilium status --wait 15m0s
