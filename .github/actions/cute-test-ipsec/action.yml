name: Test CuTE IPsec
description: Test CuTE IPsec
inputs:
  cute-dir:
    description: 'Directory with a CuTE code.'
    required: true
runs:
  using: composite
  steps:
    - name: Start conn-disrupt-test
      shell: bash
      run: |
        # Create pods which establish long lived connections. It will be used by
        # subsequent connectivity tests with --include-conn-disrupt-test to catch any
        # interruption in such flows.
        cilium connectivity test --include-conn-disrupt-test --conn-disrupt-test-setup

    - name: Rotate IPsec keys
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        echo "Rotating IPsec keys ..."
        make rotate_ipsec_key

    - name: Wait for 2 active keys
      shell: bash
      run: |
        echo "Waiting for 2 active keys ..."
        TWO_KEYS_IN_USE=false
        CILIUM_NS=$(kubectl get pod -A -l k8s-app=cilium -o=jsonpath='{range.items[*]}{.metadata.namespace}{"\n"}{end}' | head -n 1)
        for (( i=1; i<=10; i++ )); do
          sleep 30
          CILIUM_PODS=$(kubectl get pod -A -l k8s-app=cilium -o=jsonpath='{range.items[*]}{.metadata.name}{"\n"}{end}')
          TWO_KEYS_IN_USE=true
          for POD in $CILIUM_PODS; do
            KEY_COUNT=$(kubectl -n "$CILIUM_NS" exec "$POD" -c cilium-agent -- cilium encrypt status | grep "Keys in use:" || true)
            KEY_COUNT="${KEY_COUNT##*Keys in use: }"
            if [[ "$KEY_COUNT" -lt 2 ]]; then
              echo "Not all pods use new IPsec key [$POD] ..."
              TWO_KEYS_IN_USE=false
              break
            fi
          done
          [[ $TWO_KEYS_IN_USE == "true" ]] && break
        done
        [[ $TWO_KEYS_IN_USE != "true" ]] && exit 1
        echo "All the pods use 2 active keys now."

    - name: Verify state
      uses: ./.github/actions/cute-verify-state
      with:
        cute-dir: ./${{ inputs.cute-dir }}
        run-tests: false

    - name: Wait for key rotation
      shell: bash
      run: |
        echo "Waiting for key rotation ..."
        CILIUM_NS=$(kubectl get pod -A -l k8s-app=cilium -o=jsonpath='{range.items[*]}{.metadata.namespace}{"\n"}{end}' | head -n 1)
        CILIUM_PODS=$(kubectl get pod -A -l k8s-app=cilium -o=jsonpath='{range.items[*]}{.metadata.name}{"\n"}{end}')
        while true; do
          ONE_KEY_IN_USE=true
          for POD in $CILIUM_PODS; do
            KEY_COUNT=$(kubectl -n "$CILIUM_NS" exec "$POD" -c cilium-agent -- cilium encrypt status | grep "Keys in use:" || true)
            KEY_COUNT="${KEY_COUNT##*Keys in use: }"
            if [[ "$KEY_COUNT" -gt 1  ]]; then
              echo "Not all pods rotated IPsec key [$POD] ..."
              ONE_KEY_IN_USE=false
              break
            fi
          done
          [[ $ONE_KEY_IN_USE == "true" ]] && break
          sleep 60
        done
        echo "IPsec key has been rotated."

    - name: Verify state
      uses: ./.github/actions/cute-verify-state
      with:
        cute-dir: ./${{ inputs.cute-dir }}

    - name: Scale up cluster
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        echo "Scaling up cluster ..."
        make scaleup

    - name: Verify state
      uses: ./.github/actions/cute-verify-state
      with:
        cute-dir: ./${{ inputs.cute-dir }}

    - name: Scale down cluster
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        echo "Scaling down cluster ..."
        make scaledown

    - name: Display cluster pods
      shell: bash
      run: |
        echo "Displaying cluster pods ..."
        kubectl get pods --all-namespaces -o wide

    - name: Delete connectivity tests namespace
      shell: bash
      run: |
        echo "Deleting connectivity tests namespace ..."
        kubectl delete namespace cilium-test || true

    - name: Fetch artifacts
      if: ${{ !success() }}
      shell: bash
      run: |
        kubectl -n kube-system get pods -l k8s-app=cilium --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | xargs -I'{}' /bin/sh -c "echo '{}' && kubectl -n kube-system exec '{}' -c cilium-agent -- cilium metrics list | grep drop_count"
        kubectl get pods --all-namespaces -o wide
        cilium status
        mkdir -p cilium-sysdumps
        cilium sysdump --output-filename cilium-sysdump-final
        # To debug https://github.com/cilium/cilium/issues/26062
        head -n -0 /proc/buddyinfo /proc/pagetypeinfo

    - name: Upload artifacts
      if: ${{ !success() }}
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
      with:
        name: cilium-sysdumps
        path: cilium-sysdump-*.zip
        retention-days: 5
