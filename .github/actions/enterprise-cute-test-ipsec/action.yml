name: Test CuTE IPsec
description: Test CuTE IPsec
inputs:
  cute-dir:
    description: 'Directory with a CuTE code.'
    required: true
runs:
  using: composite
  steps:
    - name: Start conn-disrupt-test
      shell: bash
      run: |
        echo "🏃🏃🏃 Running conn-disrupt-tests ..."
        cilium connectivity test --include-conn-disrupt-test --test 'no-interrupted-connections,no-ipsec-xfrm-errors' --conn-disrupt-test-setup

    - name: Before rotation IPsec key
      id: before-rotation-key
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        ipsec_per_node_key=false
        CILIUM_NS=$(terraform output --raw cilium_namespace)
        ipsec_key=$(kubectl -n "$CILIUM_NS" get secrets cilium-ipsec-keys -o jsonpath="{.data.keys}" | base64 -d)
        [[ $(echo "$ipsec_key" | grep -c '+' || true) -gt 0 ]] && ipsec_per_node_key=true

        echo "IPsec key per node: $ipsec_per_node_key"
        echo ipsec_per_node_key=$ipsec_per_node_key >> $GITHUB_OUTPUT

    - name: Rotate IPsec keys
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        echo "🏃🏃🏃 Rotating IPsec keys ..."
        make rotate_ipsec_key

    - name: After rotation IPsec key
      id: after-rotation-key
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        ipsec_per_node_key=false
        CILIUM_NS=$(terraform output --raw cilium_namespace)
        ipsec_key=$(kubectl -n "$CILIUM_NS" get secrets cilium-ipsec-keys -o jsonpath="{.data.keys}" | base64 -d)
        [[ $(echo "$ipsec_key" | grep -c '+' || true) -gt 0 ]] && ipsec_per_node_key=true

        echo "IPsec key per node: $ipsec_per_node_key"
        echo ipsec_per_node_key=$ipsec_per_node_key >> $GITHUB_OUTPUT

    - name: IPsec key counts
      id: ipsec-key-counts
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        both_active=0
        after_rotation=0
        
        node_count=$(kubectl get nodes -o=jsonpath='{range.items[*]}{.metadata.name}{"\n"}{end}' | wc -l | xargs)
        echo "Cluster node count: $node_count"

        ipam_eni_or_azure=false
        [[ $(cilium config view | grep -c '^ipam[[:blank:]]*\(eni\|azure\)$') -gt 0 ]] && ipam_eni_or_azure=true
        echo "IPAM is ENI or Azure: $ipam_eni_or_azure"

        ipv6_enabled=false
        [[ $(cilium config view | grep -c '^enable-ipv6[[:blank:]]*true$') -gt 0 ]] && ipv6_enabled=true
        echo "Cilium enable-ipv6: $ipv6_enabled"

        remote_nodes=$((node_count-1))
        echo "IPsec remote node count: $remote_nodes"

        # non-per-node to non-per-node key rotation
        if [[ "${{ steps.before-rotation-key.outputs.ipsec_per_node_key }}" == "false" && "${{ steps.after-rotation-key.outputs.ipsec_per_node_key }}" == "false" ]]; then
          both_active=2
          after_rotation=1
        # non-per-node to per-node key rotation
        elif [[ "${{ steps.before-rotation-key.outputs.ipsec_per_node_key }}" == "false" && "${{ steps.after-rotation-key.outputs.ipsec_per_node_key }}" == "true" ]]; then
          if [[ "$ipam_eni_or_azure" == "true" && "$ipv6_enabled" == "true" ]]; then
            after_rotation=$((remote_nodes*6))
          elif [[ "$ipam_eni_or_azure" == "true" && "$ipv6_enabled" == "false" ]]; then
            after_rotation=$((remote_nodes*3))
          elif [[ "$ipam_eni_or_azure" == "false" && "$ipv6_enabled" == "true" ]]; then
            after_rotation=$((remote_nodes*4))
          elif [[ "$ipam_eni_or_azure" == "false" && "$ipv6_enabled" == "false" ]]; then
            after_rotation=$((remote_nodes*2))
          fi
          both_active=$((after_rotation+1))
        # per-node to per-node key rotation
        elif [[ "${{ steps.before-rotation-key.outputs.ipsec_per_node_key }}" == "true" && "${{ steps.after-rotation-key.outputs.ipsec_per_node_key }}" == "true" ]]; then
          if [[ "$ipam_eni_or_azure" == "true" && "$ipv6_enabled" == "true" ]]; then
            after_rotation=$((remote_nodes*6))
          elif [[ "$ipam_eni_or_azure" == "true" && "$ipv6_enabled" == "false" ]]; then
            after_rotation=$((remote_nodes*3))
          elif [[ "$ipam_eni_or_azure" == "false" && "$ipv6_enabled" == "true" ]]; then
            after_rotation=$((remote_nodes*4))
          elif [[ "$ipam_eni_or_azure" == "false" && "$ipv6_enabled" == "false" ]]; then
            after_rotation=$((remote_nodes*2))
          fi
          both_active=$((after_rotation*2))
        # per-node to non-per-node key rotation
        else
          after_rotation=1
          if [[ "$ipam_eni_or_azure" == "true" && "$ipv6_enabled" == "true" ]]; then
            both_active=$((remote_nodes*6))
          elif [[ "$ipam_eni_or_azure" == "true" && "$ipv6_enabled" == "false" ]]; then
            both_active=$((remote_nodes*3))
          elif [[ "$ipam_eni_or_azure" == "false" && "$ipv6_enabled" == "true" ]]; then
            both_active=$((remote_nodes*4))
          elif [[ "$ipam_eni_or_azure" == "false" && "$ipv6_enabled" == "false" ]]; then
            both_active=$((remote_nodes*2))
          fi
          both_active=$((both_active+1))
        fi

        echo "Expected IPsec key count when both keys are active: $both_active"
        echo "Expected IPsec key count after the rotation completed: $after_rotation"

        echo both_active=$both_active >> $GITHUB_OUTPUT
        echo after_rotation=$after_rotation >> $GITHUB_OUTPUT

    - name: Wait for 2 active keys
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        echo "⌛⌛⌛ Waiting for 2 active keys ..."
        TWO_KEYS_IN_USE=false
        CILIUM_NS=$(terraform output --raw cilium_namespace)
        for (( i=1; i<=10; i++ )); do
          sleep 30
          CILIUM_PODS=$(kubectl get pod -A -l k8s-app=cilium -o=jsonpath='{range.items[*]}{.metadata.name}{"\n"}{end}' || true)
          TWO_KEYS_IN_USE=true
          for POD in $CILIUM_PODS; do
            KEY_COUNT=$(kubectl -n "$CILIUM_NS" exec "$POD" -c cilium-agent -- cilium encrypt status | grep "Keys in use:" || true)
            KEY_COUNT="${KEY_COUNT##*Keys in use: }"
            if [[ "$KEY_COUNT" -ne ${{ steps.ipsec-key-counts.outputs.both_active }} ]]; then
              echo "Not all pods use new IPsec key [$POD] ..."
              TWO_KEYS_IN_USE=false
              break
            fi
          done
          [[ $TWO_KEYS_IN_USE == "true" ]] && break
        done
        [[ $TWO_KEYS_IN_USE != "true" ]] && exit 1
        echo "🔑🔑🔑 All the pods use 2 active keys now."

    - name: Verify state
      uses: ./.github/actions/enterprise-cute-verify-state
      with:
        cute-dir: ./${{ inputs.cute-dir }}
        run-tests: false

    - name: Wait for key rotation
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        echo "⌛⌛⌛ Waiting for key rotation ..."
        CILIUM_NS=$(terraform output --raw cilium_namespace)
        while true; do
          ONE_KEY_IN_USE=true
          CILIUM_PODS=$(kubectl get pod -A -l k8s-app=cilium -o=jsonpath='{range.items[*]}{.metadata.name}{"\n"}{end}'|| true)
          for POD in $CILIUM_PODS; do
            KEY_COUNT=$(kubectl -n "$CILIUM_NS" exec "$POD" -c cilium-agent -- cilium encrypt status | grep "Keys in use:" || true)
            KEY_COUNT="${KEY_COUNT##*Keys in use: }"
            if [[ "$KEY_COUNT" -ne ${{ steps.ipsec-key-counts.outputs.after_rotation }} ]]; then
              echo "Not all pods rotated IPsec key [$POD] ..."
              ONE_KEY_IN_USE=false
              break
            fi
          done
          [[ $ONE_KEY_IN_USE == "true" ]] && break
          sleep 30
        done
        echo "♻️♻️♻️ IPsec key has been rotated."

    - name: Verify state
      uses: ./.github/actions/enterprise-cute-verify-state
      with:
        cute-dir: ./${{ inputs.cute-dir }}

    - name: Scale up cluster
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        echo "⬆⬆⬆ Scaling up cluster ..."
        make scaleup
        echo "⌛⌛⌛ Waiting for Cilium to be ready ..."
        cilium status --wait 15m0s

    - name: Verify state
      uses: ./.github/actions/enterprise-cute-verify-state
      with:
        cute-dir: ./${{ inputs.cute-dir }}

    - name: Scale down cluster
      working-directory: ./${{ inputs.cute-dir }}
      shell: bash
      run: |
        echo "⬇⬇⬇ Scaling down cluster ..."
        make scaledown
        echo "⌛⌛⌛ Waiting for Cilium to be ready ..."
        cilium status --wait 15m0s

    - name: Display cluster pods
      shell: bash
      run: |
        echo "ℹ️ℹ️ℹ️ Displaying cluster pods ..."
        kubectl get pods --all-namespaces -o wide
