name: Enterprise container vulnerability scan
on:
  schedule:
    - cron: "0 4 * * 1-5"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  container-scan:
    name: scan-container
    runs-on: ubuntu-22.04
    continue-on-error: true
    outputs:
      scan_result: ${{ steps.failure-flag.outputs.scan_result }}
    strategy:
      matrix:
        image: [cilium, clustermesh-apiserver, docker-plugin, hubble-relay, operator-generic]
        # We don't scan Enterprise images for maintained OSS branches, because
        # OSS syncs don't happen frequently enough to give an accurate picture
        # of the dependencies used by Cilium. We only scan the Enterprise images
        # for the oldest maintained Enterprise version, which does not receive
        # OSS dependency updates.
        branch: [v1.13-ce, v1.14, v1.15, v1.16]
        include:
          - image: kvstoremesh
            branch: v1.14
    steps:
      - name: Checkout latest VEX data
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          sparse-checkout: |
            .github/enterprise/.openvex.json
            .github/enterprise/.grype.yaml
          sparse-checkout-cone-mode: false
          path: vex
      - name: Download Grype
        id: grype
        uses: anchore/scan-action/download-grype@64a33b277ea7a1215a3c142735a1091341939ff5 # v4.1.2
      - name: Scan image
        id: scan
        run: |
          if [ ${{ matrix.branch }} == "v1.13-ce" ]; then
            org="isovalent-dev"
          else
            org="cilium"
          fi
          ${{ steps.grype.outputs.cmd }} quay.io/"$org"/${{ matrix.image }}-ci:${{ matrix.branch }} \
            --output json=results.json --output table=results.txt --fail-on medium \
            --vex vex/.github/enterprise/.openvex.json \
            --config vex/.github/enterprise/.grype.yaml
      - name: Set failure flag if necessary
        id: failure-flag
        if: ${{ failure() }}
        run: echo "scan_result=failure" >> $GITHUB_OUTPUT
      - name: Extract scan results
        if: ${{ failure() }}
        run: |
          jq '[.matches[]
              | select(.vulnerability.severity == "Medium" or .vulnerability.severity == "High" or .vulnerability.severity == "Critical")
              | {id: .vulnerability.id,
                image: "${{ matrix.image }}-${{ matrix.branch }}",
                severity: .vulnerability.severity,
                name: .artifact.name,
                version: .artifact.version,
                purl: .artifact.purl,
                paths: [.artifact.locations[].path]}]' \
              results.json > ${{ matrix.image }}-${{ matrix.branch }}.json
      - name: Output scan results
        if: ${{ failure() }}
        run: |
          cat ${{ matrix.image }}-${{ matrix.branch }}.json
          exit 1
      - name: Upload result summary
        if: ${{ failure() }}
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: ${{ matrix.image }}-${{ matrix.branch }}.json
          path: ${{ matrix.image }}-${{ matrix.branch }}.json
          if-no-files-found: ignore

  check-scan-results:
      # Fails the entire workflow if any scanning job run has failed, despite the
      # use of `continue-on-error` in the previous job.
      name: Check Scan Results
      runs-on: ubuntu-22.04
      needs: container-scan
      steps:
        - name: Check if any scans failed
          run: |
            if [ "${{ needs.container-scan.outputs.scan_result }}" = "failure" ]; then
              echo "One or more container scans failed. Check the uploaded artifacts to" \
              "view the CVEs causing the failures."
              exit 1
            else
              echo "All container scans succeeded."
            fi
