name: CuTE CI

on:
  workflow_dispatch:
    inputs:
      PR-number:
        description: "Pull request number. Not relevant for CuTEs."
        required: true
        default: 'n/a'
      context-ref:
        description: "Context in which the workflow runs. If PR is from a fork, will be the PR target branch (general case). If PR is NOT from a fork, will be the PR branch itself (this allows committers to test changes to workflows directly from PRs)."
        required: true
        default: 'main-ce'
      SHA:
        description: "SHA under test (head of the PR branch). Not relevant for CuTEs."
        required: true
        default: 'n/a'
      extra-args:
        description: "Mandatory arguments passed from the trigger comment via regex capture group. For example: `sky`, `bloomberg`, etc."
        required: true
      use-stable-branch:
        description: "Arbitrary argument that indicates if CuTE should run on top of CE stable branch."
        required: true
        default: 'false'
      helm-override-file:
        description: "Helm override Cilium values file."
        required: false
        default: ''

env:
  helm_registry: quay.io
  helm_registry_namespace: isovalent-charts-dev
  regions: '{"aws": "us-west-2", "azure": "westus2", "gcp": "us-west2-a"}'
  name: ${{ github.run_id }}
  USE_GKE_GCLOUD_AUTH_PLUGIN: True

jobs:
  cute-ci:
    name: CuTE CI
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - name: Checkout context ref
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.context-ref || github.sha }}
          persist-credentials: false

      - name: Set Environment Variables
        uses: ./.github/actions/set-env-variables

      - name: Set up job variables
        id: vars
        run: |
          input=${{ inputs.extra-args }}
          region=""
          if [[ $input == *~* ]]; then
            region="${input##*~}"
            input=${input%%~*}
          fi

          ref=""
          if [[ $input == *@* ]]; then
            ref="${input##*@}"
            input=${input%%@*}
          fi

          dir=""
          repo=$input
          if [[ $input == */* ]]; then
            dir="${input##*/}"
            repo=${input%%/*}
          fi

          echo cute_repo=$repo >> $GITHUB_OUTPUT
          echo cute_dir=$dir >> $GITHUB_OUTPUT
          echo cute_ref=$ref >> $GITHUB_OUTPUT
          echo cute_region=$region >> $GITHUB_OUTPUT

      - name: Checkout CuTE repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: isovalent/cute-${{ steps.vars.outputs.cute_repo }}
          ref: ${{ steps.vars.outputs.cute_ref }}
          token: ${{ secrets.ISOVALENT_BOT_READ_PRIVATE_REPOSITORIES }}
          path: cute

      - name: Set CuTE properties
        id: cute_props
        working-directory: ./cute
        run: |
          cd ./${{ steps.vars.outputs.cute_dir }}
          provider=""
          region=""
          count=$(cat *.tf | grep -c 'provider "aws"' || true)
          if [[ "$count" -gt 0 ]]; then
            provider="aws"
            region=$(echo "$regions" | jq -r .aws)
          fi
          count=$(cat *.tf | grep -c 'provider "azurerm"' || true)
          if [[ "$count" -gt 0 ]]; then
            provider="azure"
            region=$(echo "$regions" | jq -r .azure)
          fi
          count=$(cat *.tf | grep -c 'provider "google"' || true)
          if [[ "$count" -gt 0 ]]; then
            provider="gcp"
            region=$(echo "$regions" | jq -r .gcp)
          fi

          if [[ -z $provider ]]; then
            echo "terraform provider not found!"
            exit 1
          fi

          if [[ "${{ steps.vars.outputs.cute_region }}" != "" ]]; then
            region=${{ steps.vars.outputs.cute_region }}
          fi

          ce_branch=${{ inputs.context-ref }}
          use_stable_branch=${{ inputs.use-stable-branch }}
          if [[ $use_stable_branch == 'true' ]]; then
            chart_version=$(grep -A 3 '^variable "cilium_helm_version.*" {' *.tf | grep 'default')
            chart_version=$(echo "${chart_version##*=}" | xargs)
            # remove patch version number
            if [[ $chart_version =~ ^[[:digit:]]+.[[:digit:]]+..* ]]; then
              major="${chart_version%%\.*}"
              minor="${chart_version#*.}"
              minor="${minor%%\.*}"
              chart_version="$major.$minor"
            fi
            ce_branch="v$chart_version-ce"
          fi

          use_ce_chart=false
          count=$(grep -o '^cilium:\s*$' *.y*ml | wc -l | xargs || true)
          if [[ "$count" -gt 0 ]]; then
            use_ce_chart=true
          fi

          echo provider=$provider >> $GITHUB_OUTPUT
          echo region=$region >> $GITHUB_OUTPUT
          echo ce_branch=$ce_branch >> $GITHUB_OUTPUT
          echo use_ce_chart=$use_ce_chart >> $GITHUB_OUTPUT

      - name: Print CuTE properties
        run: |
          echo "CuTE repo: ${{ steps.vars.outputs.cute_repo }}"
          echo "CuTE dir: ${{ steps.vars.outputs.cute_dir }}"
          echo "CuTE ref: ${{ steps.vars.outputs.cute_ref }}"
          echo "Cloud provider: ${{ steps.cute_props.outputs.provider }}"
          echo "Region: ${{ steps.cute_props.outputs.region }}"
          echo "CE branch: ${{ steps.cute_props.outputs.ce_branch }}"
          echo "CE umbrella chart: ${{ steps.cute_props.outputs.use_ce_chart }}"
          echo "Helm override file: ${{ inputs.helm-override-file }}"

      - name: Install Cilium CLI
        uses: cilium/cilium-cli@beceead2bece1d174e2c11f36e6bfac8ce3f8e7d # v0.15.16
        with:
          repository: ${{ env.CILIUM_CLI_RELEASE_REPO }}
          release-version: ${{ env.CILIUM_CLI_VERSION }}

      - name: Install cfssl
        run: |
          sudo curl -L https://github.com/cloudflare/cfssl/releases/download/v1.6.4/cfssl_1.6.4_linux_amd64 \
               --output /usr/local/bin/cfssl --show-error --fail
          sudo curl -L https://github.com/cloudflare/cfssl/releases/download/v1.6.4/cfssljson_1.6.4_linux_amd64 \
               --output /usr/local/bin/cfssljson --show-error --fail
          sudo chmod +x /usr/local/bin/cfssl*

      # We configure Git SSH to use a private access token so that `terraform
      # get` commands ran as part of `terraform init` are able to download
      # terraform modules from private repositories
      - name: Configure Git
        run: |
          git config --global url."https://oauth2:${{ secrets.ISOVALENT_BOT_READ_PRIVATE_REPOSITORIES }}@github.com".insteadOf ssh://git@github.com

      - name: Set up AWS CLI credentials
        if: steps.cute_props.outputs.provider == 'aws'
        uses: aws-actions/configure-aws-credentials@7ca194810a339d88e7c8d84405d963c9b2b5044f
        with:
          aws-access-key-id: ${{ secrets.AWS_PR_SA_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PR_SA_KEY }}
          aws-region: ${{ steps.cute_props.outputs.region }}

      - name: Set up gcloud credentials
        if: steps.cute_props.outputs.provider == 'gcp'
        id: auth
        uses: google-github-actions/auth@042a3056d60b02f62a368700aaa7a72c9075ff69
        with:
          credentials_json: '${{ secrets.GCP_PR_SA_KEY }}'

      - name: Set up gcloud CLI
        if: steps.cute_props.outputs.provider == 'gcp'
        uses: google-github-actions/setup-gcloud@63496e652100112a8db8a71668b77c67aa1ab071
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get gcloud user unique id
        if: steps.cute_props.outputs.provider == 'gcp'
        run: |
          GCLOUD_USER_UNIQUE_ID=$(gcloud iam service-accounts describe isovalent-cilium-sa@cilium-pr.iam.gserviceaccount.com --project "${{ secrets.GCP_PROJECT_ID }}" | grep uniqueId | cut -d' ' -f2 | tr -d "'")
          echo "GCLOUD_USER_UNIQUE_ID=$GCLOUD_USER_UNIQUE_ID" >> $GITHUB_ENV

      - name: Install gke-gcloud-auth-plugin
        if: steps.cute_props.outputs.provider == 'gcp'
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Display gcloud CLI info
        if: steps.cute_props.outputs.provider == 'gcp'
        run: |
          gcloud info

      - name: Create an SSH key pair
        if: steps.cute_props.outputs.provider == 'gcp'
        run: |
          ssh-keygen -t rsa -f ${HOME}/.ssh/google_compute_engine -C ${{ env.name }} -b 2048 -N "" -q

      - name: Login to Azure
        if: steps.cute_props.outputs.provider == 'azure'
        uses: azure/login@4c88f01b0e3a5600e08a37889921afd060f75cf0 # v1.5.0
        with:
          creds: ${{ secrets.AZURE_PR_SP_CREDS }}

      - name: Prepare Azure TF variables
        if: steps.cute_props.outputs.provider == 'azure'
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_PR_SP_CREDS }}
        run: |
          # Parse Azure secret into Terraform variables
          echo "ARM_CLIENT_ID=$( jq -r '.clientId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$( jq -r '.clientSecret' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$( jq -r '.subscriptionId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$( jq -r '.tenantId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV

      - name: Checkout CE branch
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          # checkout pull request head ref so that print-chart-version.sh prints the correct chart version.
          ref: ${{ steps.cute_props.outputs.ce_branch }}
          # required for git describe
          fetch-depth: 0
          path: cilium

      - name: Set helm chart version
        id: cute_helm
        working-directory: ./cilium
        run: |
          version=$(bash contrib/scripts/print-chart-version.sh)
          echo version=$version >> $GITHUB_OUTPUT
          echo version_ce=$version-enterprise >> $GITHUB_OUTPUT

      - name: Wait for Helm dev chart to be available
        timeout-minutes: 30
        run: |
          helm registry login quay.io -u ${{ secrets.QUAY_ISOVALENT_CHARTS_DEV_USERNAME }} -p ${{ secrets.QUAY_ISOVALENT_CHARTS_DEV_PASSWORD }}
          until helm pull oci://${{ env.helm_registry }}/${{ env.helm_registry_namespace }}/cilium --version ${{ steps.cute_helm.outputs.version }} &> /dev/null;
            do sleep 15s;
          done

      - name: Checkout enterprise helm repo
        if: steps.cute_props.outputs.use_ce_chart == 'true'
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: isovalent/helm-charts
          token: ${{ secrets.ISOVALENT_BOT_READ_PRIVATE_REPOSITORIES }}
          path: ce_chart

      - name: Hack enterprise helm chart
        if: steps.cute_props.outputs.use_ce_chart == 'true'
        working-directory: ./ce_chart
        run: |
          yq e -i '(.dependencies[] | select(.name == "cilium")).version = "${{ steps.cute_helm.outputs.version }}"' ./cilium-enterprise/Chart.yaml
          yq e -i '(.dependencies[] | select(.name == "cilium")).repository = "oci://${{ env.helm_registry }}/${{ env.helm_registry_namespace }}"' ./cilium-enterprise/Chart.yaml

      - name: Push enterprise helm chart
        if: steps.cute_props.outputs.use_ce_chart == 'true'
        uses: cilium/reusable-workflows/.github/actions/push-helm-chart@6ae27958f2f37545bf48e44106b73df05b1f6d12 # v0.1.0
        with:
          name: cilium-enterprise
          path: ce_chart/cilium-enterprise
          version: ${{ steps.cute_helm.outputs.version_ce }}
          registry: quay.io
          registry_namespace: ${{ env.helm_registry_namespace }}
          registry_username: ${{ secrets.QUAY_CHARTS_DEV_USERNAME }}
          registry_password: ${{ secrets.QUAY_CHARTS_DEV_PASSWORD }}

      - name: CuTE Terraform variables file
        working-directory: ./cute
        run: |
          HELM_CHART="oci://${{ env.helm_registry }}/${{ env.helm_registry_namespace }}/cilium"
          HELM_CHART_VERSION=${{ steps.cute_helm.outputs.version }}
          if [[ ${{ steps.cute_props.outputs.use_ce_chart }} == 'true' ]]; then
            HELM_CHART="oci://${{ env.helm_registry }}/${{ env.helm_registry_namespace }}/cilium-enterprise"
            HELM_CHART_VERSION=${{ steps.cute_helm.outputs.version_ce }}
          fi

          cd ./${{ steps.vars.outputs.cute_dir }}
          cat > terraform.tfvars << EOF
          cluster_name="cute-${{ env.name }}"
          owner="ci"
          region="${{ steps.cute_props.outputs.region }}"
          cilium_helm_chart="$HELM_CHART"
          cilium_helm_version="$HELM_CHART_VERSION"
          # the below variables are for cluster mesh scenario
          cilium_helm_version_1="$HELM_CHART_VERSION"
          cilium_helm_version_2="$HELM_CHART_VERSION"
          EOF
          if [[ "${{ inputs.helm-override-file }}" != "" ]]; then
            echo "cilium_helm_values_override_file_path=\"${{ inputs.helm-override-file }}\"" >> terraform.tfvars
          fi
          if [[ "$ARM_SUBSCRIPTION_ID" != "" ]]; then
            echo "subscription_id=\"$ARM_SUBSCRIPTION_ID\"" >> terraform.tfvars
          fi

      - name: Create CuTE resources
        id: create
        working-directory: ./cute
        run: |
          # The below line is required for Terraform provisioner script:
          # https://github.com/isovalent/terraform-k8s-cilium/blob/main/scripts/provisioner.sh#L79
          helm repo add isovalent https://helm.isovalent.com
          cd ./${{ steps.vars.outputs.cute_dir }}
          make apply AUTO_APPROVE=true

      - name: Run CuTE tests
        timeout-minutes: 60
        working-directory: ./cute
        run: |
          cd ./${{ steps.vars.outputs.cute_dir }}
          make test

      # If the creation step was run, always run the cleanup step, even if create or test steps failed
      - name: Clean up CuTE resources
        if: always() && steps.create.outcome != 'skipped'
        working-directory: ./cute
        run: |
          cd ./${{ steps.vars.outputs.cute_dir }}
          make destroy AUTO_APPROVE=true
