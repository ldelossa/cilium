name: CuTE CI

on:
  workflow_dispatch:
    inputs:
      PR-number:
        description: "Not relevant for CuTEs."
        required: true
        default: 'n/a'
      context-ref:
        description: "Context branch. More info: https://www.notion.so/isovalent/Customer-Test-Environment-CuTE-43a53c6e2b984c5fb299d7e728ee862f?pvs=4#818708b5a3384e54b21667111cc0423a."
        required: false
        default: ''
      SHA:
        description: "Not relevant for CuTEs."
        required: true
        default: 'n/a'
      extra-args:
        description: "Mandatory arguments passed from the trigger comment via regex capture group. More info: https://www.notion.so/isovalent/Customer-Test-Environment-CuTE-43a53c6e2b984c5fb299d7e728ee862f?pvs=4#818708b5a3384e54b21667111cc0423a."
        required: true
      helm-override-file:
        description: "Helm override Cilium values file."
        required: false
        default: ''

# By specifying the access of one of the scopes, all of those that are not
# specified are set to 'none'.
permissions:
  # To be able to access the repository with actions/checkout
  contents: read
  # To be able to request the JWT from GitHub's OIDC provider
  id-token: write

env:
  helm_registry: quay.io
  regions: '{"aws": "us-west-2", "azure": "westus2", "gcp": "us-west2-a"}'
  name: ${{ github.run_id }}
  USE_GKE_GCLOUD_AUTH_PLUGIN: True
  # renovate: datasource=github-releases depName=kubernetes/kubernetes
  kubectl_version: v1.30.0
  upload_dir: github-upload
  artifact_retention_days: 15

jobs:
  commit-status-start:
    if: ${{ github.event_name != 'push' }}
    name: Commit Status Start
    runs-on: ubuntu-latest
    steps:
      - name: Set initial commit status
        uses: myrotvorets/set-commit-status-action@3730c0a348a2ace3c110851bed53331bc6406e9f # v2.0.1
        with:
          sha: ${{ inputs.SHA || github.sha }}

  cute-ci:
    name: CuTE CI
    runs-on: ubuntu-latest
    timeout-minutes: 750
    steps:
      - name: Checkout workflow context branch
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
        with:
          persist-credentials: false

      - name: Set Environment Variables
        uses: ./.github/actions/set-env-variables

      - name: Set up job variables
        id: vars
        run: |
          repo=""
          dir="."
          branch=""
          oss="false"
          region=""
          umbrella="false"
          deploy="current"
          upgrade=""
          notify=""
          owner=""

          input="${{ inputs.extra-args }}"
          IFS='&' args=($input)
          for a in "${args[@]}"; do
            case $a in
            repo=*)
              repo="${a##*repo=}"
              ;;
            dir=*)
              dir="${a##*dir=}"
              ;;
            ref=*)
              ref="${a##*ref=}"
              ;;
            oss=*)
              oss="${a##*oss=}"
              ;;
            region=*)
              region="${a##*region=}"
              ;;
            umbrella=*)
              umbrella="${a##*umbrella=}"
              ;;
            deploy=*)
              deploy="${a##*deploy=}"
              ;;
            upgrade=*)
              upgrade="${a##*upgrade=}"
              ;;
            notify=*)
              notify="${a##*notify=}"
              ;;
            owner=*)
              owner="${a##*owner=}"
              ;;
            *)
              echo -n "unknown param: $a"
              exit 1
              ;;
            esac
          done

          [[ -n "$owner" ]] && owner="<@$owner>"

          echo cute_repo=$repo >> $GITHUB_OUTPUT
          echo cute_dir=$dir >> $GITHUB_OUTPUT
          echo umbrella_chart=$umbrella >> $GITHUB_OUTPUT
          echo cute_ref=$ref >> $GITHUB_OUTPUT
          echo cute_region=$region >> $GITHUB_OUTPUT
          echo deploy=$deploy >> $GITHUB_OUTPUT
          echo upgrade=$upgrade >> $GITHUB_OUTPUT
          echo oss=$oss >> $GITHUB_OUTPUT
          echo notify=$notify >> $GITHUB_OUTPUT
          echo owner=$owner >> $GITHUB_OUTPUT

      - name: Set helm repositories
        run: |
          # Required for Terraform provisioner script:
          helm repo add ${{ env.CILIUM_HELM_REPO_NAME }} ${{ env.CILIUM_HELM_REPO_URL }}
          helm repo add ${{ env.CILIUM_OSS_HELM_REPO_NAME }} ${{ env.CILIUM_OSS_HELM_REPO_URL }}

      - name: Checkout CuTE repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
        with:
          repository: isovalent/cute-${{ steps.vars.outputs.cute_repo }}
          ref: ${{ steps.vars.outputs.cute_ref }}
          token: ${{ secrets.ISOVALENT_BOT_READ_PRIVATE_REPOSITORIES }}
          path: cute

      - name: Set CuTE properties
        id: cute_props
        working-directory: ./cute/${{ steps.vars.outputs.cute_dir }}
        run: |
          echo "getting cloud provider and region ..."
          provider=""
          region=""
          count=$(cat *.tf | grep -c 'provider "aws"' || true)
          if [[ "$count" -gt 0 ]]; then
            provider="aws"
            region=$(echo "$regions" | jq -r .aws)
          fi
          count=$(cat *.tf | grep -c 'provider "azurerm"' || true)
          if [[ "$count" -gt 0 ]]; then
            provider="azure"
            region=$(echo "$regions" | jq -r .azure)
          fi
          count=$(cat *.tf | grep -c 'provider "google"' || true)
          if [[ "$count" -gt 0 ]]; then
            provider="gcp"
            region=$(echo "$regions" | jq -r .gcp)
          fi
          if [[ -z $provider ]]; then
            echo "terraform provider not found!"
            exit 1
          fi
          if [[ "${{ steps.vars.outputs.cute_region }}" != "" ]]; then
            region=${{ steps.vars.outputs.cute_region }}
          fi

          echo "getting cute helm chart used version ..."
          cute_chart_version=$(grep -A 3 '^variable "cilium_helm_version.*" {' *.tf | grep 'default')
          cute_chart_version=$(echo "${cute_chart_version##*=}" | xargs)
          # remove patch version number
          if [[ $cute_chart_version =~ ^[[:digit:]]+.[[:digit:]]+..* ]]; then
            major="${cute_chart_version%%\.*}"
            minor="${cute_chart_version#*.}"
            minor="${minor%%\.*}"
            cute_chart_version="$major.$minor"
          fi

          branch_suffix=""
          helm_repo="${{ env.CILIUM_OSS_HELM_REPO_NAME }}"
          if [[ "${{ steps.vars.outputs.oss }}" != "true" ]]; then
            branch_suffix="${{ env.BRANCH_SUFFIX }}"
            helm_repo="${{ env.CILIUM_HELM_REPO_NAME }}"
          fi

          echo "getting deploy branch and chart version ..."
          deploy_target=""
          if [[ "${{ steps.vars.outputs.deploy }}" == "current" ]]; then
            deploy_target="${{ inputs.context-ref }}"
          elif [[ "${{ steps.vars.outputs.deploy }}" == "stable" ]]; then
            deploy_target=$(helm search repo $helm_repo/cilium --version $cute_chart_version -o json | jq '.[0] .version')
          elif [[ "${{ steps.vars.outputs.deploy }}" == "latest" ]]; then
            deploy_target="v$cute_chart_version$branch_suffix"
          elif [[ "${{ steps.vars.outputs.deploy }}" =~ ^(v){0,1}[0-9]+.[0-9]+.*$ ]]; then
            deploy_target="${{ steps.vars.outputs.deploy }}"
          fi

          echo "getting upgrade branch and chart version ..."
          upgrade_target="${{ steps.vars.outputs.upgrade }}"
          if [[ "${{ steps.vars.outputs.upgrade }}" == "current" ]]; then
            upgrade_target="${{ inputs.context-ref }}"
          elif [[ "${{ steps.vars.outputs.upgrade }}" == "stable" ]]; then
            upgrade_target=$(helm search repo $helm_repo/cilium --version $cute_chart_version -o json | jq '.[0] .version')
          elif [[ "${{ steps.vars.outputs.upgrade }}" == "latest" ]]; then
            upgrade_target="v$cute_chart_version$branch_suffix"
          fi

          echo provider=$provider >> $GITHUB_OUTPUT
          echo region=$region >> $GITHUB_OUTPUT
          echo deploy_target=$deploy_target >> $GITHUB_OUTPUT
          echo upgrade_target=$upgrade_target >> $GITHUB_OUTPUT

      - name: Print CuTE properties
        run: |
          echo "CuTE repo: ${{ steps.vars.outputs.cute_repo }}"
          echo "CuTE dir: ${{ steps.vars.outputs.cute_dir }}"
          echo "CuTE ref: ${{ steps.vars.outputs.cute_ref }}"
          echo "CuTE OSS: ${{ steps.vars.outputs.oss }}"
          echo "Cloud provider: ${{ steps.cute_props.outputs.provider }}"
          echo "Region: ${{ steps.cute_props.outputs.region }}"
          echo "Deploy: ${{ steps.vars.outputs.deploy }}"
          echo "Deploy target: ${{ steps.cute_props.outputs.deploy_target }}"
          echo "Helm umbrella chart: ${{ steps.vars.outputs.umbrella_chart }}"
          echo "Helm override file: ${{ inputs.helm-override-file }}"
          echo "Upgrade: ${{ steps.vars.outputs.upgrade }}"
          echo "Upgrade target: ${{ steps.cute_props.outputs.upgrade_target }}"
          echo "Slack notification channel: ${{ steps.vars.outputs.notify }}"

      - name: Install Cilium CLI
        run: |
          repo="${{ env.CILIUM_CLI_REPO }}"
          [[ "${{ steps.vars.outputs.oss }}" == "true" ]] && repo="${{ env.CILIUM_OSS_CLI_REPO }}"
          curl -LO https://github.com/$repo/releases/latest/download/cilium-linux-amd64.tar.gz
          sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin
          rm cilium-linux-amd64.tar.gz

      - name: Install kubectl
        shell: bash
        run: |
          curl -sLO "https://dl.k8s.io/release/${{ env.kubectl_version }}/bin/linux/amd64/kubectl"
          curl -sLO "https://dl.k8s.io/${{ env.kubectl_version }}/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Install cfssl
        run: |
          sudo curl -L https://github.com/cloudflare/cfssl/releases/download/v1.6.4/cfssl_1.6.4_linux_amd64 \
               --output /usr/local/bin/cfssl --show-error --fail
          sudo curl -L https://github.com/cloudflare/cfssl/releases/download/v1.6.4/cfssljson_1.6.4_linux_amd64 \
               --output /usr/local/bin/cfssljson --show-error --fail
          sudo chmod +x /usr/local/bin/cfssl*

      # We configure Git SSH to use a private access token so that `terraform
      # get` commands ran as part of `terraform init` are able to download
      # terraform modules from private repositories
      - name: Configure Git
        run: |
          git config --global url."https://oauth2:${{ secrets.ISOVALENT_BOT_READ_PRIVATE_REPOSITORIES }}@github.com".insteadOf ssh://git@github.com

      - name: Set up AWS CLI credentials
        if: steps.cute_props.outputs.provider == 'aws'
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ secrets.AWS_PR_CUTE_ASSUME_ROLE }}
          aws-region: ${{ steps.cute_props.outputs.region }}
          role-duration-seconds: 43200 # 12 hours

      - name: Set up gcloud credentials
        if: steps.cute_props.outputs.provider == 'gcp'
        id: auth
        uses: google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c # v2.1.2
        with:
          workload_identity_provider: ${{ secrets.GCP_PR_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_PR_SA }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Set up gcloud CLI
        if: steps.cute_props.outputs.provider == 'gcp'
        uses: google-github-actions/setup-gcloud@744a572c207e56d136e77af5afaa423c0010cf09
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get gcloud user unique id
        if: steps.cute_props.outputs.provider == 'gcp'
        run: |
          GCLOUD_USER_UNIQUE_ID=$(gcloud iam service-accounts describe isovalent-cilium-sa@cilium-pr.iam.gserviceaccount.com --project "${{ secrets.GCP_PROJECT_ID }}" | grep uniqueId | cut -d' ' -f2 | tr -d "'")
          echo "GCLOUD_USER_UNIQUE_ID=$GCLOUD_USER_UNIQUE_ID" >> $GITHUB_ENV

      - name: Install gke-gcloud-auth-plugin
        if: steps.cute_props.outputs.provider == 'gcp'
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Display gcloud CLI info
        if: steps.cute_props.outputs.provider == 'gcp'
        run: |
          gcloud info

      - name: Create an SSH key pair
        if: steps.cute_props.outputs.provider == 'gcp'
        run: |
          ssh-keygen -t rsa -f ${HOME}/.ssh/google_compute_engine -C ${{ env.name }} -b 2048 -N "" -q

      - name: Login to Azure
        if: steps.cute_props.outputs.provider == 'azure'
        uses: azure/login@6b2456866fc08b011acb422a92a4aa20e2c4de32 # v2.1.0
        with:
          creds: ${{ secrets.AZURE_PR_SP_CREDS }}

      - name: Prepare Azure TF variables
        if: steps.cute_props.outputs.provider == 'azure'
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_PR_SP_CREDS }}
        run: |
          # Parse Azure secret into Terraform variables
          echo "ARM_CLIENT_ID=$( jq -r '.clientId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$( jq -r '.clientSecret' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$( jq -r '.subscriptionId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$( jq -r '.tenantId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV

      - name: Prepare helm chart
        id: cute_helm
        # Skip for `cute`, `stable` or `<version>` because Helm chart already exists
        if: steps.vars.outputs.deploy == 'current' || steps.vars.outputs.deploy == 'latest'
        timeout-minutes: 30
        uses: ./.github/actions/enterprise-cute-helm-chart
        with:
          branch: ${{ steps.cute_props.outputs.deploy_target }}
          oss: ${{ steps.vars.outputs.oss }}
          umbrella: ${{ steps.vars.outputs.umbrella_chart }}
          quay-user: ${{ secrets.QUAY_CHARTS_DEV_USERNAME }}
          quay-password: ${{ secrets.QUAY_CHARTS_DEV_PASSWORD }}
          isovalent-bot: ${{ secrets.ISOVALENT_BOT_READ_PRIVATE_REPOSITORIES }}

      - name: Prepare upgrade helm chart
        id: cute_helm_upgrade
        # Skip for `stable` and `<version>` because Helm chart already exists
        if: steps.vars.outputs.upgrade == 'current' || steps.vars.outputs.upgrade == 'latest'
        timeout-minutes: 30
        uses: ./.github/actions/enterprise-cute-helm-chart
        with:
          branch: ${{ steps.cute_props.outputs.upgrade_target }}
          oss: ${{ steps.vars.outputs.oss }}
          umbrella: ${{ steps.vars.outputs.umbrella_chart }}
          quay-user: ${{ secrets.QUAY_CHARTS_DEV_USERNAME }}
          quay-password: ${{ secrets.QUAY_CHARTS_DEV_PASSWORD }}
          isovalent-bot: ${{ secrets.ISOVALENT_BOT_READ_PRIVATE_REPOSITORIES }}

      - name: CuTE Terraform variables file
        working-directory: ./cute/${{ steps.vars.outputs.cute_dir }}
        run: |
          echo "${{ secrets.OPENSHIFT_PULL_SECRET }}" | base64 -d > .pullsecret.json
          cat > terraform.tfvars << EOF
          cluster_name="cute-${{ env.name }}"
          owner="ci"
          region="${{ steps.cute_props.outputs.region }}"
          EOF

          # Helm chart and version needs to be set for the `current` and `latest` deploy types.
          if [[ "${{ steps.vars.outputs.deploy }}" == "current" ]] || [[ "${{ steps.vars.outputs.deploy }}" == "latest" ]]; then
            if [[ ${{ steps.vars.outputs.umbrella_chart }} != 'true' ]]; then
              echo "cilium_helm_chart=\"oci://${{ env.helm_registry }}/${{ steps.cute_helm.outputs.quay-org }}/cilium\"" >> terraform.tfvars
            else
              echo "cilium_helm_chart=\"${{ steps.cute_helm.outputs.umbrella-chart-path }}\"" >> terraform.tfvars
            fi
            echo "cilium_helm_version=\"${{ steps.cute_helm.outputs.version }}\"" >> terraform.tfvars
            # the below variables are for cluster mesh scenario
            echo "cilium_helm_version_1=\"${{ steps.cute_helm.outputs.version }}\"" >> terraform.tfvars
            echo "cilium_helm_version_2=\"${{ steps.cute_helm.outputs.version }}\"" >> terraform.tfvars
          # Only helm version needs to be set for the `stable` and `<version>` deploy types (chart remains the same).
          # Nothing needs to be changed to the `cute` deploy type.
          elif [[ "${{ steps.vars.outputs.deploy }}" != "cute" ]]; then
            echo "cilium_helm_version=\"${{ steps.cute_props.outputs.deploy_target }}\"" >> terraform.tfvars
            # the below variables are for cluster mesh scenario
            echo "cilium_helm_version_1=\"${{ steps.cute_props.outputs.deploy_target }}\"" >> terraform.tfvars
            echo "cilium_helm_version_2=\"${{ steps.cute_props.outputs.deploy_target }}\"" >> terraform.tfvars
          fi

          if [[ "${{ inputs.helm-override-file }}" != "" ]]; then
            echo "cilium_helm_values_override_file_path=\"${{ inputs.helm-override-file }}\"" >> terraform.tfvars
          fi
          if [[ "$ARM_SUBSCRIPTION_ID" != "" ]]; then
            echo "subscription_id=\"$ARM_SUBSCRIPTION_ID\"" >> terraform.tfvars
          fi

          cat terraform.tfvars

      - name: Create CuTE resources
        id: create
        timeout-minutes: 60
        working-directory: ./cute/${{ steps.vars.outputs.cute_dir }}
        run: |
          make apply AUTO_APPROVE=true

      - name: Set cluster config
        working-directory: ./cute/${{ steps.vars.outputs.cute_dir }}
        run: |
          eval $(make kubeconfig | grep KUBECONFIG)
          [[ ! "$KUBECONFIG" =~ ^/.* ]] && KUBECONFIG="$(pwd)/$KUBECONFIG"
          cat $KUBECONFIG # useful for troubleshooting, especially for the RKE clusters.
          echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV

      - name: Wait for Cilium to be ready
        timeout-minutes: 20
        working-directory: ./cute/${{ steps.vars.outputs.cute_dir }}
        run: |
          # Temporary fix for the NWM CuTE to make cluster stable
          make startup_wait || true
          cilium status --wait 15m0s

      - name: Run CuTE upgrade
        if: steps.vars.outputs.upgrade != ''
        id: cute_upgrade
        timeout-minutes: 40
        uses: ./.github/actions/enterprise-cute-upgrade
        with:
          deploy: ${{ steps.vars.outputs.deploy }}
          upgrade: ${{ steps.vars.outputs.upgrade }}
          upgrade-target: ${{ steps.cute_props.outputs.upgrade_target }}
          helm-version: ${{ steps.cute_helm_upgrade.outputs.version }}
          umbrella-chart-path: ${{ steps.cute_helm_upgrade.outputs.umbrella-chart-path }}
          cute-dir: ./cute/${{ steps.vars.outputs.cute_dir }}
          quay-org: ${{ steps.cute_helm_upgrade.outputs.quay-org }}

      - name: Check encryption type
        id: encryption
        run: |
          if [[ $(cilium config view | grep -c '^enable-ipsec[[:blank:]]*true$' || true) -gt 0 ]]; then
            echo type=ipsec >> $GITHUB_OUTPUT
          elif [[ $(cilium config view | grep -c '^enable-wireguard[[:blank:]]*true$' || true) -gt 0 ]]; then
            echo type=wireguard >> $GITHUB_OUTPUT
          else
            echo type=none >> $GITHUB_OUTPUT
          fi

      - name: IPsec tests
        if: steps.encryption.outputs.type == 'ipsec'
        id: ipsec_tests
        timeout-minutes: 420
        uses: ./.github/actions/enterprise-cute-test-ipsec
        with:
          cute-dir: ./cute/${{ steps.vars.outputs.cute_dir }}

      - name: Run CuTE tests
        id: tests
        timeout-minutes: 90
        working-directory: ./cute/${{ steps.vars.outputs.cute_dir }}
        run: |
          make test

      - name: Prepare notification message
        if: ${{ always() && steps.vars.outputs.notify != '' }}
        id: notify_message
        run: |
          dir=""
          if [[ -n "${{ steps.vars.outputs.cute_dir }}" && "${{ steps.vars.outputs.cute_dir }}" != "." ]]; then
           dir="/${{ steps.vars.outputs.cute_dir }}"
          fi

          message="*${{ steps.vars.outputs.cute_repo }}$dir* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|"
          if [[ ${{ job.status }} == 'success' ]]; then
            message="$message workflow passed!> :tada::tada::tada:"
          else
            message="$message workflow failed!> :rotating_light::rotating_light::rotating_light: ${{ steps.vars.outputs.owner }}"
          fi

          echo message=$message >> $GITHUB_OUTPUT

      - name: Send notification
        if: ${{ always() && steps.vars.outputs.notify != '' }}
        uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e # v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.CUTE_SLACK_BOT_TOKEN }}
        with:
          channel-id: '${{ steps.vars.outputs.notify }}'
          slack-message: '${{ steps.notify_message.outputs.message }}'

      - name: Collect sysdumps
        if: ${{ !success() && steps.create.outcome != 'skipped' }}
        shell: bash
        working-directory: ./cute/${{ steps.vars.outputs.cute_dir }}
        run: |
          mkdir -p ${{ env.upload_dir }}/cilium-sysdumps
          # Move all previously created sysdumps
          mv *.zip ${{ env.upload_dir }}/cilium-sysdumps/ || true
          
          cilium status
          cilium sysdump --output-filename ${{ env.upload_dir }}/cilium-sysdumps/cilium-sysdump-final

      - name: Collect metrics and logs
        if: ${{ !success() && steps.create.outcome != 'skipped' }}
        shell: bash
        working-directory: ./cute/${{ steps.vars.outputs.cute_dir }}
        run: |
          CILIUM_NS=$(terraform output --raw cilium_namespace)
          kubectl -n $CILIUM_NS get pods -l k8s-app=cilium --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | xargs -I'{}' /bin/sh -c "echo '{}' && kubectl -n $CILIUM_NS exec '{}' -c cilium-agent -- cilium metrics list | grep drop_count"
          kubectl get pods --all-namespaces -o wide

          echo "Collecting cilium logs ..."
          mkdir -p ${{ env.upload_dir }}/cilium-logs
          CILIUM_PODS=$(kubectl -n $CILIUM_NS get pods -l k8s-app=cilium -o=jsonpath='{range.items[*]}{.metadata.name}{"\n"}{end}')
          for POD in $(echo $CILIUM_PODS); do
            kubectl -n $CILIUM_NS describe pods $POD > ${{ env.upload_dir }}/cilium-logs/$POD-describe.log
            kubectl -n $CILIUM_NS logs $POD > ${{ env.upload_dir }}/cilium-logs/$POD.log
          done

          # To debug https://github.com/cilium/cilium/issues/26062
          head -n -0 /proc/buddyinfo /proc/pagetypeinfo || true

      # This is to work around the fact that relative paths in actions/upload-artifact@v3 are rooted
      # against the workspace, which causes an "Invalid pattern" if the CuTE repo dir is ".".
      - name: Prepare upload
        if: always() && steps.create.outcome != 'skipped'
        id: upload_prep
        run: |
          if test -d ./cute/${{ steps.vars.outputs.cute_dir }}/${{ env.upload_dir }}; then
            echo dir=$(realpath ./cute/${{ steps.vars.outputs.cute_dir }}/${{ env.upload_dir }}) >> $GITHUB_OUTPUT
          else
            echo dir=nothingtoupload >> $GITHUB_OUTPUT
          fi

      - name: Upload Artifacts
        if: always() && steps.create.outcome != 'skipped'
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: output
          path: ${{ steps.upload_prep.outputs.dir }}
          if-no-files-found: ignore
          retention-days: ${{ env.artifact_retention_days }}

      # If the creation step was run, always run the cleanup step, even if create or test steps failed
      - name: Clean up CuTE resources
        if: always() && steps.create.outcome != 'skipped'
        timeout-minutes: 60
        working-directory: ./cute/${{ steps.vars.outputs.cute_dir }}
        run: |
          echo "killing terraform processes ..."
          ps -ef | grep terraform | grep -v grep | awk '{print $2}' | xargs -n 1 kill -9 || true
          if [ -f .terraform.tfstate.lock.info ]; then
            echo "unlocking terraform state ..."
            LOCK_ID=$(jq -r '.ID' .terraform.tfstate.lock.info)
            terraform force-unlock -force "$LOCK_ID" || true
          fi
          echo "destroying infra ..."
          make destroy AUTO_APPROVE=true

  commit-status-final:
    if: ${{ always() && github.event_name != 'push' }}
    name: Commit Status Final
    needs: cute-ci
    runs-on: ubuntu-latest
    steps:
      - name: Set final commit status
        uses: myrotvorets/set-commit-status-action@3730c0a348a2ace3c110851bed53331bc6406e9f # v2.0.1
        with:
          sha: ${{ inputs.SHA || github.sha }}
          status: ${{ needs.cute-ci.result }}
